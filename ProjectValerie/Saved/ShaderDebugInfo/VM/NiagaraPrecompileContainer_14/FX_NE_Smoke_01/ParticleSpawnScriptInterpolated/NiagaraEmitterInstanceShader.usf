#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
	float Engine_Owner_TimeSinceRendered;
	float Engine_Owner_LODDistance;
	float Engine_Owner_LODDistanceFraction;
	float Engine_System_Age;
	int Engine_Owner_ExecutionState;
	int Engine_System_TickCount;
	int Engine_System_NumEmitters;
	int Engine_System_NumEmittersAlive;
}

cbuffer FNiagaraOwnerParameters
{
	float4x4 Engine_Owner_SystemLocalToWorld;
	float4x4 Engine_Owner_SystemWorldToLocal;
	float4x4 Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 Engine_Owner_SystemWorldToLocalNoScale;
	float4 Engine_Owner_Rotation;
	float4 Engine_Owner_Position;
	float4 Engine_Owner_Velocity;
	float4 Engine_Owner_SystemXAxis;
	float4 Engine_Owner_SystemYAxis;
	float4 Engine_Owner_SystemZAxis;
	float4 Engine_Owner_Scale;
}

cbuffer FNiagaraEmitterParameters
{
	int Engine_Emitter_NumParticles;
	int Engine_Emitter_TotalSpawnedParticles;
	float Engine_Emitter_SpawnCountScale;
	float Emitter_Age;
	int Emitter_RandomSeed;
	int Engine_Emitter_PaddingInt32_0;
	int Engine_Emitter_PaddingInt32_1;
	int Engine_Emitter_PaddingInt32_2;
}

cbuffer FNiagaraExternalParameters
{
	float Constants_Emitter_UniformRangedFloat_Minimum;
	float Constants_Emitter_UniformRangedFloat_Maximum;
	int Constants_Emitter_UniformRangedFloat_RandomSeed;
	float Constants_Emitter_InitializeParticle_Lifetime;
	float4 Constants_Emitter_InitializeParticle_Color;
	float Constants_Emitter_InitializeParticle_Mass;
	float2 Constants_Emitter_InitializeParticle_SpriteSize;
	float Constants_Emitter_InitializeParticle_SpriteRotation;
	int Constants_Emitter_SphereLocation_RandomSeed;
	float Constants_Emitter_SphereLocation_SurfaceOnlyBandThickness;
	float Constants_Emitter_SphereLocation_SphereRadius;
	float3 Constants_Emitter_SphereLocation_NonUniformScale;
	float3 Constants_Emitter_SphereLocation_Offset;
	int Constants_Emitter_SphereLocation_SpawnGroupMask;
	float Constants_Emitter_UniformRangedFloat003_Minimum;
	float Constants_Emitter_UniformRangedFloat003_Maximum;
	int Constants_Emitter_UniformRangedFloat003_RandomSeed;
	float Constants_Emitter_UniformRangedFloat004_Minimum;
	float Constants_Emitter_UniformRangedFloat004_Maximum;
	int Constants_Emitter_UniformRangedFloat004_RandomSeed;
	float Constants_Emitter_UniformRangedFloat005_Minimum;
	float Constants_Emitter_UniformRangedFloat005_Maximum;
	int Constants_Emitter_UniformRangedFloat005_RandomSeed;
	float3 Constants_Emitter_InitialMeshOrientation_OrientationVector;
	float3 Constants_Emitter_InitialMeshOrientation_OrientationAxis;
	float Constants_Emitter_UniformRangedFloat001_Minimum;
	float Constants_Emitter_UniformRangedFloat001_Maximum;
	int Constants_Emitter_UniformRangedFloat001_RandomSeed;
	float3 Constants_Emitter_AddVelocityFromPoint_OriginOffset;
	float Constants_Emitter_AddVelocityFromPoint_VelocityFalloffDistance;
	float4 Constants_Emitter_UniformRangedLinearColor_Minimum;
	float4 Constants_Emitter_UniformRangedLinearColor_Maximum;
	int Constants_Emitter_UniformRangedLinearColor_RandomSeed;
	float3 Constants_Emitter_Color_ScaleColor;
	float Constants_Emitter_Color_ScaleAlpha;
	float Emitter_AlphaScale;
	float Constants_Emitter_FloatFromCurve001_ScaleCurve;
	float3 Constants_Emitter_ScaleColor_ScaleRGB;
	float Constants_Emitter_FloatFromCurve_ScaleCurve;
	float Constants_Emitter_FloatFromCurve002_ScaleCurve;
	float Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	float Constants_Emitter_UniformRangedFloat006_Minimum;
	float Constants_Emitter_UniformRangedFloat006_Maximum;
	int Constants_Emitter_UniformRangedFloat006_RandomSeed;
	float Constants_Emitter_UniformRangedFloat007_Minimum;
	float Constants_Emitter_UniformRangedFloat007_Maximum;
	int Constants_Emitter_UniformRangedFloat007_RandomSeed;
	float Constants_Emitter_UniformRangedFloat008_Minimum;
	float Constants_Emitter_UniformRangedFloat008_Maximum;
	int Constants_Emitter_UniformRangedFloat008_RandomSeed;
	float Constants_Emitter_MeshRotationForce_LeverRadiusASC40cmASC41;
	float3 Constants_Emitter_PendulumSetup_PendulumPivotOffset;
	float3 Constants_Emitter_PendulumSetup_PendulumRestAxis;
	float Constants_Emitter_PendulumSetup_PendulumLength;
	float Constants_Emitter_PendulumSetup_SpringDrivenConstraintASC40TightnessASC41;
	int Engine_ExecutionCount;
	float Emitter_SpawnRate;
	float Emitter_SpawnInterval;
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
}

cbuffer PREV_FNiagaraGlobalParameters
{
	float PREV_Engine_DeltaTime;
	float PREV_Engine_InverseDeltaTime;
	float PREV_Engine_Time;
	float PREV_Engine_RealTime;
}

cbuffer PREV_FNiagaraSystemParameters
{
	float PREV_Engine_Owner_TimeSinceRendered;
	float PREV_Engine_Owner_LODDistance;
	float PREV_Engine_Owner_LODDistanceFraction;
	float PREV_Engine_System_Age;
	int PREV_Engine_Owner_ExecutionState;
	int PREV_Engine_System_TickCount;
	int PREV_Engine_System_NumEmitters;
	int PREV_Engine_System_NumEmittersAlive;
}

cbuffer PREV_FNiagaraOwnerParameters
{
	float4x4 PREV_Engine_Owner_SystemLocalToWorld;
	float4x4 PREV_Engine_Owner_SystemWorldToLocal;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalNoScale;
	float4 PREV_Engine_Owner_Rotation;
	float4 PREV_Engine_Owner_Position;
	float4 PREV_Engine_Owner_Velocity;
	float4 PREV_Engine_Owner_SystemXAxis;
	float4 PREV_Engine_Owner_SystemYAxis;
	float4 PREV_Engine_Owner_SystemZAxis;
	float4 PREV_Engine_Owner_Scale;
}

cbuffer PREV_FNiagaraEmitterParameters
{
	int PREV_Engine_Emitter_NumParticles;
	int PREV_Engine_Emitter_TotalSpawnedParticles;
	float PREV_Engine_Emitter_SpawnCountScale;
	float PREV_Emitter_Age;
	int PREV_Emitter_RandomSeed;
	int PREV_Engine_Emitter_PaddingInt32_0;
	int PREV_Engine_Emitter_PaddingInt32_1;
	int PREV_Engine_Emitter_PaddingInt32_2;
}

cbuffer PREV_FNiagaraExternalParameters
{
	float PREV_Constants_Emitter_UniformRangedFloat_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat_RandomSeed;
	float PREV_Constants_Emitter_InitializeParticle_Lifetime;
	float4 PREV_Constants_Emitter_InitializeParticle_Color;
	float PREV_Constants_Emitter_InitializeParticle_Mass;
	float2 PREV_Constants_Emitter_InitializeParticle_SpriteSize;
	float PREV_Constants_Emitter_InitializeParticle_SpriteRotation;
	int PREV_Constants_Emitter_SphereLocation_RandomSeed;
	float PREV_Constants_Emitter_SphereLocation_SurfaceOnlyBandThickness;
	float PREV_Constants_Emitter_SphereLocation_SphereRadius;
	float3 PREV_Constants_Emitter_SphereLocation_NonUniformScale;
	float3 PREV_Constants_Emitter_SphereLocation_Offset;
	int PREV_Constants_Emitter_SphereLocation_SpawnGroupMask;
	float PREV_Constants_Emitter_UniformRangedFloat003_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat003_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat003_RandomSeed;
	float PREV_Constants_Emitter_UniformRangedFloat004_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat004_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat004_RandomSeed;
	float PREV_Constants_Emitter_UniformRangedFloat005_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat005_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat005_RandomSeed;
	float3 PREV_Constants_Emitter_InitialMeshOrientation_OrientationVector;
	float3 PREV_Constants_Emitter_InitialMeshOrientation_OrientationAxis;
	float PREV_Constants_Emitter_UniformRangedFloat001_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat001_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat001_RandomSeed;
	float3 PREV_Constants_Emitter_AddVelocityFromPoint_OriginOffset;
	float PREV_Constants_Emitter_AddVelocityFromPoint_VelocityFalloffDistance;
	float4 PREV_Constants_Emitter_UniformRangedLinearColor_Minimum;
	float4 PREV_Constants_Emitter_UniformRangedLinearColor_Maximum;
	int PREV_Constants_Emitter_UniformRangedLinearColor_RandomSeed;
	float3 PREV_Constants_Emitter_Color_ScaleColor;
	float PREV_Constants_Emitter_Color_ScaleAlpha;
	float PREV_Emitter_AlphaScale;
	float PREV_Constants_Emitter_FloatFromCurve001_ScaleCurve;
	float3 PREV_Constants_Emitter_ScaleColor_ScaleRGB;
	float PREV_Constants_Emitter_FloatFromCurve_ScaleCurve;
	float PREV_Constants_Emitter_FloatFromCurve002_ScaleCurve;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	float PREV_Constants_Emitter_UniformRangedFloat006_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat006_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat006_RandomSeed;
	float PREV_Constants_Emitter_UniformRangedFloat007_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat007_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat007_RandomSeed;
	float PREV_Constants_Emitter_UniformRangedFloat008_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat008_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat008_RandomSeed;
	float PREV_Constants_Emitter_MeshRotationForce_LeverRadiusASC40cmASC41;
	float3 PREV_Constants_Emitter_PendulumSetup_PendulumPivotOffset;
	float3 PREV_Constants_Emitter_PendulumSetup_PendulumRestAxis;
	float PREV_Constants_Emitter_PendulumSetup_PendulumLength;
	float PREV_Constants_Emitter_PendulumSetup_SpringDrivenConstraintASC40TightnessASC41;
	int PREV_Engine_ExecutionCount;
	float PREV_Emitter_SpawnRate;
	float PREV_Emitter_SpawnInterval;
	float PREV_Emitter_InterpSpawnStartDt;
	int PREV_Emitter_SpawnGroup;
}

struct FParamMap0_VectorFromFloat002
{
	float Value;
};

struct FParamMap0_VectorFromFloat001
{
	float Value;
};

struct FParamMap0_VectorFromFloat
{
	float Value;
};

struct FParamMap0_UniformRangedLinearColor
{
	bool FixedRandomSeed;
	float4 Maximum;
	float4 Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat008
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat007
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat006
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat005
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat004
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat003
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat001
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_Transient
{
	float3 MeshScaleFactor;
	float4 ParticleColorScaleFactor;
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	float PhysicsGoalPendulumLength;
	bool PhysicsisPendulumRigid;
	float3 PhysicsPendulumPivot;
	float3 PhysicsPendulumRestAxis;
	float PhysicsRotationalDrag;
	float3 PhysicsRotationalForce;
};

struct FParamMap0_SphereLocation
{
	int CoordinateSpace;
	bool FixedRandomSeed;
	bool HemisphereX;
	bool HemisphereY;
	bool HemisphereZ;
	float3 NonUniformScale;
	bool NormalizeThickness;
	float3 Offset;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	int SpawnGroupMask;
	float3 SphereOrigin;
	float SphereRadius;
	int SurfaceExpansionMode;
	float SurfaceOnlyBandThickness;
};

struct FParamMap0_SolveRotationalForcesAndVelocity
{
	float DeltaTime;
	float4 MeshOrientation;
	float RotationalInertia;
	float3 RotationalVelocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ScaleVelocity
{
	int CoordinateSpace;
	float3 VelocityScale;
};

struct FParamMap0_ScaleMeshSize
{
	float3 InitialMeshScale;
	float3 ScaleFactor;
};

struct FParamMap0_ScaleColor
{
	float4 ColorValueToScale;
	float ScaleAlpha;
	float3 ScaleRGB;
};

struct FParamMap0_PendulumSetup
{
	bool EnableSpringDriver;
	float PendulumLength;
	float3 PendulumPivot;
	float3 PendulumPivotOffset;
	int PendulumPivotOffsetCoordinateSpace;
	float3 PendulumRestAxis;
	bool RigidPendulum;
	float SpringDrivenConstraintASC40TightnessASC41;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Particles_Initial
{
	float4 Color;
	float3 Scale;
	float3 Velocity;
};

struct FParamMap0_Particles
{
	float Age;
	float4 Color;
	FParamMap0_Particles_Initial Initial;
	float4 InitialRotation;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float4 MeshOrientation;
	float NormalizedAge;
	float3 Position;
	float3 PreviousVelocity;
	float RotationalInertia;
	float3 RotationalVelocity;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SphereLocation
{
	float3 SphereNormal;
};

struct FParamMap0_OUTPUT_VAR_SolveRotationalForcesAndVelocity
{
	float IncomingPhysicsRotationalDrag;
	float3 IncomingPhysicsRotationalForce;
	float4 MeshOrientation;
	float3 RotationalVelocity;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR_AddVelocityFromPoint
{
	float NormalizedFalloff;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_AddVelocityFromPoint AddVelocityFromPoint;
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_OUTPUT_VAR_SolveRotationalForcesAndVelocity SolveRotationalForcesAndVelocity;
	FParamMap0_OUTPUT_VAR_SphereLocation SphereLocation;
};

struct FParamMap0_MeshRotationForce
{
	float LeverRadiusASC40cmASC41;
	float3 Rotation;
};

struct FParamMap0_Local_SphereLocation
{
	float3 SphereVector;
};

struct FParamMap0_Local_SolveRotationalForcesAndVelocity
{
	float DeltaTime;
	float3 ForceRotationsInRadians;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local_InitialMeshOrientation
{
	bool Temp;
};

struct FParamMap0_Local
{
	FParamMap0_Local_InitialMeshOrientation InitialMeshOrientation;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Local_SolveRotationalForcesAndVelocity SolveRotationalForcesAndVelocity;
	FParamMap0_Local_SphereLocation SphereLocation;
};

struct FParamMap0_Interpolation
{
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
	float Emitter_SpawnInterval;
	int InterpSpawn_Index;
	float InterpSpawn_InvSpawnTime;
	float InterpSpawn_InvUpdateTime;
	float InterpSpawn_SpawnTime;
	float InterpSpawn_UpdateTime;
	float SpawnInterp;
};

struct FParamMap0_InitialMeshOrientation
{
	float3 OrientationAxis;
	int OrientationCoordinateSpace;
	float3 OrientationVector;
	float3 Rotation;
};

struct FParamMap0_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float3 MeshScale;
	float3 Position;
	float SpriteRotation;
	float2 SpriteSize;
	bool WriteColor;
	bool WriteLifetime;
	bool WriteMass;
	bool WriteMaterialRandom;
	bool WritePosition;
	bool WriteScale;
	bool WriteSpriteRotation;
	bool WriteSpriteSize;
};

struct FParamMap0_FloatFromCurve002
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve001
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_Engine_System
{
	float Age;
	int NumEmitters;
	int NumEmittersAlive;
	int TickCount;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistance;
	float LODDistanceFraction;
	float3 Position;
	float4 Rotation;
	float3 Scale;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemLocalToWorldTransposed;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float4x4 SystemWorldToLocalTransposed;
	float3 SystemXAxis;
	float3 SystemYAxis;
	float3 SystemZAxis;
	float TimeSinceRendered;
	float3 Velocity;
};

struct FParamMap0_Engine_Emitter
{
	int NumParticles;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int PaddingInt32_2;
	float SpawnCountScale;
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	int ExecutionCount;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_Emitter
{
	float Age;
	float AlphaScale;
	float InterpSpawnStartDt;
	bool LocalSpace;
	int RandomSeed;
	int SpawnGroup;
	float SpawnInterval;
	float SpawnRate;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_Constants_Emitter_UniformRangedLinearColor
{
	float4 Maximum;
	float4 Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat008
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat007
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat006
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat005
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat004
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat003
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat001
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_SphereLocation
{
	float3 NonUniformScale;
	float3 Offset;
	int RandomSeed;
	int SpawnGroupMask;
	float SphereRadius;
	float SurfaceOnlyBandThickness;
};

struct FParamMap0_Constants_Emitter_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float SpeedLimit;
};

struct FParamMap0_Constants_Emitter_ScaleColor
{
	float3 ScaleRGB;
};

struct FParamMap0_Constants_Emitter_PendulumSetup
{
	float PendulumLength;
	float3 PendulumPivotOffset;
	float3 PendulumRestAxis;
	float SpringDrivenConstraintASC40TightnessASC41;
};

struct FParamMap0_Constants_Emitter_MeshRotationForce
{
	float LeverRadiusASC40cmASC41;
};

struct FParamMap0_Constants_Emitter_InitialMeshOrientation
{
	float3 OrientationAxis;
	float3 OrientationVector;
};

struct FParamMap0_Constants_Emitter_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float SpriteRotation;
	float2 SpriteSize;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve002
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve001
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_Color
{
	float ScaleAlpha;
	float3 ScaleColor;
};

struct FParamMap0_Constants_Emitter_AddVelocityFromPoint
{
	float3 OriginOffset;
	float VelocityFalloffDistance;
};

struct FParamMap0_Constants_Emitter
{
	FParamMap0_Constants_Emitter_AddVelocityFromPoint AddVelocityFromPoint;
	FParamMap0_Constants_Emitter_Color Color;
	FParamMap0_Constants_Emitter_FloatFromCurve FloatFromCurve;
	FParamMap0_Constants_Emitter_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_Constants_Emitter_FloatFromCurve002 FloatFromCurve002;
	FParamMap0_Constants_Emitter_InitializeParticle InitializeParticle;
	FParamMap0_Constants_Emitter_InitialMeshOrientation InitialMeshOrientation;
	FParamMap0_Constants_Emitter_MeshRotationForce MeshRotationForce;
	FParamMap0_Constants_Emitter_PendulumSetup PendulumSetup;
	FParamMap0_Constants_Emitter_ScaleColor ScaleColor;
	FParamMap0_Constants_Emitter_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Constants_Emitter_SphereLocation SphereLocation;
	FParamMap0_Constants_Emitter_UniformRangedFloat UniformRangedFloat;
	FParamMap0_Constants_Emitter_UniformRangedFloat001 UniformRangedFloat001;
	FParamMap0_Constants_Emitter_UniformRangedFloat003 UniformRangedFloat003;
	FParamMap0_Constants_Emitter_UniformRangedFloat004 UniformRangedFloat004;
	FParamMap0_Constants_Emitter_UniformRangedFloat005 UniformRangedFloat005;
	FParamMap0_Constants_Emitter_UniformRangedFloat006 UniformRangedFloat006;
	FParamMap0_Constants_Emitter_UniformRangedFloat007 UniformRangedFloat007;
	FParamMap0_Constants_Emitter_UniformRangedFloat008 UniformRangedFloat008;
	FParamMap0_Constants_Emitter_UniformRangedLinearColor UniformRangedLinearColor;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Emitter Emitter;
};

struct FParamMap0_Color
{
	float4 Color;
	float ScaleAlpha;
	float3 ScaleColor;
};

struct FParamMap0_BreakVector001
{
	float X;
	float Y;
	float Z;
};

struct FParamMap0_BreakVector
{
	float X;
	float Y;
	float Z;
};

struct FParamMap0_AddVelocityFromPoint
{
	float3 DefaultPosition;
	bool InvertVelocityFalloff;
	float3 OriginOffset;
	int OriginOffsetCoordinateSpace;
	bool UseFalloffDistance;
	float VelocityFalloffDistance;
	float3 VelocityOrigin;
	float VelocityStrength;
};

struct FParamMap0
{
	FParamMap0_AddVelocityFromPoint AddVelocityFromPoint;
	FParamMap0_BreakVector BreakVector;
	FParamMap0_BreakVector001 BreakVector001;
	FParamMap0_Color Color;
	FParamMap0_Constants Constants;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Emitter Emitter;
	FParamMap0_Engine Engine;
	FParamMap0_FloatFromCurve FloatFromCurve;
	FParamMap0_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_FloatFromCurve002 FloatFromCurve002;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_InitialMeshOrientation InitialMeshOrientation;
	FParamMap0_Interpolation Interpolation;
	FParamMap0_Local Local;
	FParamMap0_MeshRotationForce MeshRotationForce;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_PendulumSetup PendulumSetup;
	FParamMap0_ScaleColor ScaleColor;
	FParamMap0_ScaleMeshSize ScaleMeshSize;
	FParamMap0_ScaleVelocity ScaleVelocity;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_SolveRotationalForcesAndVelocity SolveRotationalForcesAndVelocity;
	FParamMap0_SphereLocation SphereLocation;
	FParamMap0_Transient Transient;
	FParamMap0_UniformRangedFloat UniformRangedFloat;
	FParamMap0_UniformRangedFloat001 UniformRangedFloat001;
	FParamMap0_UniformRangedFloat003 UniformRangedFloat003;
	FParamMap0_UniformRangedFloat004 UniformRangedFloat004;
	FParamMap0_UniformRangedFloat005 UniformRangedFloat005;
	FParamMap0_UniformRangedFloat006 UniformRangedFloat006;
	FParamMap0_UniformRangedFloat007 UniformRangedFloat007;
	FParamMap0_UniformRangedFloat008 UniformRangedFloat008;
	FParamMap0_UniformRangedLinearColor UniformRangedLinearColor;
	FParamMap0_VectorFromFloat VectorFromFloat;
	FParamMap0_VectorFromFloat001 VectorFromFloat001;
	FParamMap0_VectorFromFloat002 VectorFromFloat002;
};

struct FSimulationContext
{
	FParamMap0 MapSpawn;
	FParamMap0 MapUpdate;
};

static float HackSpawnInterp = 1.0;
void GetRandomInfo_Emitter_Determinism_false_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float Out_Result, inout FSimulationContext Context);
void UniformRangedFloat_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void VectorFromFloat_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context);
void InitializeParticle_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context);
void InitializeParticle_Emitter_Func_(inout FSimulationContext Context);
void RandomRangeFloat_Func_(float3 In_Min, float3 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_Result, inout FSimulationContext Context);
void RandomPointInSphere_Func_(float In_InnerRadius, float In_OuterRadius, int In_RandomnessMode, bool In_OverrideSeed, int In_Seed, bool In_FixedOverrideSeed, out float3 Out_Ouput, inout FSimulationContext Context);
void CustomHlsl99D2D00244511A096EA5088DE8D89968_Func_(bool In_X, bool In_Y, bool In_Z, out float3 Out_Output);
void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context);
void SphereLocation_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void SphereLocation_Emitter_Func_(inout FSimulationContext Context);
void UniformRangedFloat003_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void UniformRangedFloat004_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void UniformRangedFloat005_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void BreakVector_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context);
void InitialMeshOrientation_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context);
void AxisAngleToQuaternion_Func_(float4 In_AxisAngle, bool In_NormalizeAxis, out float4 Out_Quaternion, inout FSimulationContext Context);
void CustomHlsl001624D816540ECD5F976902A85E139007C_Func_(float4 In_Quat1, float4 In_Quat2, out float4 Out_Result);
void MultiplyQuaternion_Func_(float4 In_QuaternionA, float4 In_QuaternionB, out float4 Out_Quaternion, inout FSimulationContext Context);
void ApplyRotationVector_NormalizeRotations_true_Func_(float3 In_RotationalVelocityVector, float In_DeltaTime, float4 In_ExistingOrientationQuat, out float4 Out_NewOrientationQuat, inout FSimulationContext Context);
void InitialMeshOrientation_Emitter_Func_(inout FSimulationContext Context);
void UniformRangedFloat001_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void AddVelocityFromPoint_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void AddVelocityFromPoint_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float2 Out_Result, inout FSimulationContext Context);
void RandomUnitVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context);
void RandomVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_Vector, inout FSimulationContext Context);
void NormalizeDistanceRange_Func_(float3 In_StartPosition, float3 In_EndPosition, float In_Distance, float3 In_FallbackVector, out float Out_NormalizedRange, out float Out_InverseNormalizedRange, out float3 Out_NormalizedVectorBetweenPositions, out bool Out_WithinRange, inout FSimulationContext Context);
void DistanceBasedFalloff_Func_(float3 In_StartPosition, float3 In_EndPosition, float In_Distance, bool In_InvertFalloff, float In_FalloffScale, float3 In_FallbackVector, out float Out_Falloff, out float3 Out_NormalizedVectorBetweenPositions, out float Out_NormalizedDistanceRange, out bool Out_PositionIsWithinRange, inout FSimulationContext Context);
void AddVelocityFromPoint_Emitter_Func_(inout FSimulationContext Context);
void UniformRangedLinearColor_Emitter_Func_(out float4 Out_UniformRangedLinearColor, inout FSimulationContext Context);
void Color_Emitter_Func_(inout FSimulationContext Context);
void ParticleState_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterScaleAlphaFloatCurve001(float In_X, out float Out_Value);
void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void ScaleColor_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterValueScaleFactorFloatCurve(float In_X, out float Out_Value);
void FloatFromCurve_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void VectorFromFloat001_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context);
void ScaleMeshSize_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterValueVelocityScaleFloatCurve(float In_X, out float Out_Value);
void FloatFromCurve002_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void VectorFromFloat002_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context);
void ScaleVelocity_NF_TransformOffset_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void ScaleVelocity_Emitter_Func_(inout FSimulationContext Context);
void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context);
void UniformRangedFloat006_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void UniformRangedFloat007_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void UniformRangedFloat008_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void BreakVector001_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context);
void MeshRotationForce_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void MeshRotationForce_Emitter_Func_(inout FSimulationContext Context);
void ApplyRotationVector_NormalizeRotations_false_Func_(float3 In_RotationalVelocityVector, float In_DeltaTime, float4 In_ExistingOrientationQuat, out float4 Out_NewOrientationQuat, inout FSimulationContext Context);
void SolveRotationalForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context);
void PendulumSetup_NF_InitialParticlePosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void PendulumSetup_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void PendulumSetup_Emitter_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void GetRandomInfo_Emitter_Determinism_false_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context)
{
	bool Constant23 = false;
	int Constant24 = 0;
	bool Result = NiagaraAll(In_RandomnessMode == Constant24);
	bool Result1 = Constant23 && Result;
	int Constant25 = 1;
	bool Result2 = NiagaraAll(In_RandomnessMode == Constant25);
	bool Result3 = Result1 || Result2;
	int Seed_IfResult;
	if(In_OverrideSeed)
	{
	Seed_IfResult = In_Seed;
	}
	else
	{
	Seed_IfResult = Context.MapSpawn.Emitter.RandomSeed;
	}
	int Constant26 = 0;
	int Constant27 = 0;
	int Seed1_IfResult;
	int Seed2_IfResult;
	int Seed3_IfResult;
	if(In_FixedOverrideSeed)
	{
	Seed1_IfResult = Seed_IfResult;
	Seed2_IfResult = Constant26;
	Seed3_IfResult = Constant27;
	}
	else
	{
	Seed1_IfResult = Context.MapSpawn.Particles.UniqueID;
	Seed2_IfResult = Context.MapSpawn.Engine.System.TickCount;
	Seed3_IfResult = Seed_IfResult;
	}
	int Constant28 = -1;
	int Constant29 = -1;
	int Constant30 = -1;
	int Seed1_IfResult1;
	int Seed2_IfResult1;
	int Seed3_IfResult1;
	if(Result3)
	{
	Seed1_IfResult1 = Seed1_IfResult;
	Seed2_IfResult1 = Seed2_IfResult;
	Seed3_IfResult1 = Seed3_IfResult;
	}
	else
	{
	Seed1_IfResult1 = Constant28;
	Seed2_IfResult1 = Constant29;
	Seed3_IfResult1 = Constant30;
	}
	NiagaraRandInfo Output1;
	Output1.Seed1 = Seed1_IfResult1;
	Output1.Seed2 = Seed2_IfResult1;
	Output1.Seed3 = Seed3_IfResult1;
	Out_RandomInfo = Output1;
	Out_UseDeterministicRandoms = Result3;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant19 = (0);
	bool Constant20 = false;
	int Constant21 = 0;
	int Constant22 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant19, In_OverrideSeed, Constant21, Constant22, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms, Context);
	float Result4 = In_Max - In_Min;
	int Seed1;
	int Seed2;
	int Seed3;
	Seed1 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed1;
	Seed2 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed2;
	Seed3 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed3;
	float Result5 = rand_float(Result4, Seed1, Seed2, Seed3);
	float Result6 = rand_float(Result4);
	float Random_IfResult;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms)
	{
	Random_IfResult = Result5;
	}
	else
	{
	Random_IfResult = Result6;
	}
	float Result7 = In_Min + Random_IfResult;
	Out_Result = Result7;
}

void UniformRangedFloat_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant17 = 0;
	bool Constant18 = false;
	int Mode_IfResult;
	bool Override_IfResult;
	if(Context.MapSpawn.UniformRangedFloat.OverrideRandomness)
	{
	Mode_IfResult = Context.MapSpawn.UniformRangedFloat.RandomnessMode;
	Override_IfResult = Context.MapSpawn.UniformRangedFloat.OverrideSeed;
	}
	else
	{
	Mode_IfResult = Constant17;
	Override_IfResult = Constant18;
	}
	float RandomRangeFloat_Func_Output_Result;
	RandomRangeFloat_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedFloat.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat.RandomSeed, Mode_IfResult, Override_IfResult, Context.MapSpawn.UniformRangedFloat.FixedRandomSeed, RandomRangeFloat_Func_Output_Result, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result;
}

void VectorFromFloat_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context)
{
	float3 Output11;
	Output11.x = Context.MapSpawn.VectorFromFloat.Value;
	Output11.y = Context.MapSpawn.VectorFromFloat.Value;
	Output11.z = Context.MapSpawn.VectorFromFloat.Value;
	Out_Vec3 = Output11;
}

void InitializeParticle_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant39 = true;
	float3 Constant40 = float3(0,0,0);
	float3 Vector_IfResult;
	if(Constant39)
	{
	Vector_IfResult = Constant40;
	}
	else
	{
	Vector_IfResult = Context.MapSpawn.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant47 = (0);
	bool Constant48 = false;
	int Constant49 = 0;
	int Constant50 = (0);
	bool Constant51 = false;
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant47, In_OverrideSeed, Constant49, Constant50, Constant51, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1, Context);
	float Result8 = In_Max - In_Min;
	int Seed11;
	int Seed21;
	int Seed31;
	Seed11 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed1;
	Seed21 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed2;
	Seed31 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed3;
	float Result9 = rand_float(Result8, Seed11, Seed21, Seed31);
	float Result10 = rand_float(Result8);
	float Random_IfResult1;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1)
	{
	Random_IfResult1 = Result9;
	}
	else
	{
	Random_IfResult1 = Result10;
	}
	float Result11 = In_Min + Random_IfResult1;
	Out_Result = Result11;
}

void InitializeParticle_Emitter_Func_(inout FSimulationContext Context)
{
	float Lifetime_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteLifetime)
	{
	Lifetime_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Lifetime;
	}
	else
	{
	Lifetime_IfResult = Context.MapSpawn.Particles.Lifetime;
	}
	Context.MapSpawn.Particles.Lifetime = Lifetime_IfResult;
	float4 Color_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteColor)
	{
	Color_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Color;
	}
	else
	{
	Color_IfResult = Context.MapSpawn.Particles.Color;
	}
	Context.MapSpawn.Particles.Color = Color_IfResult;
	float Mass_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteMass)
	{
	Mass_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Mass;
	}
	else
	{
	Mass_IfResult = Context.MapSpawn.Particles.Mass;
	}
	Context.MapSpawn.Particles.Mass = Mass_IfResult;
	float2 SpriteSize_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteSize)
	{
	SpriteSize_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteSize;
	}
	else
	{
	SpriteSize_IfResult = Context.MapSpawn.Particles.SpriteSize;
	}
	Context.MapSpawn.Particles.SpriteSize = SpriteSize_IfResult;
	float SpriteRotation_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteRotation)
	{
	SpriteRotation_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteRotation;
	}
	else
	{
	SpriteRotation_IfResult = Context.MapSpawn.Particles.SpriteRotation;
	}
	Context.MapSpawn.Particles.SpriteRotation = SpriteRotation_IfResult;
	float3 Scale_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteScale)
	{
	Scale_IfResult = Context.MapSpawn.InitializeParticle.MeshScale;
	}
	else
	{
	Scale_IfResult = Context.MapSpawn.Particles.Scale;
	}
	Context.MapSpawn.Particles.Scale = Scale_IfResult;
	float3 Scale_IfResult1;
	if(Context.MapSpawn.InitializeParticle.WritePosition)
	{
	Scale_IfResult1 = Context.MapSpawn.InitializeParticle.Position;
	}
	else
	{
	Scale_IfResult1 = Context.MapSpawn.Particles.Position;
	}
	Context.MapSpawn.Particles.Position = Scale_IfResult1;
	float MaterialRandom_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteMaterialRandom)
	{
	MaterialRandom_IfResult = Context.MapSpawn.InitializeParticle.MaterialRandom;
	}
	else
	{
	MaterialRandom_IfResult = Context.MapSpawn.Particles.MaterialRandom;
	}
	Context.MapSpawn.Particles.MaterialRandom = MaterialRandom_IfResult;
}

void RandomRangeFloat_Func_(float3 In_Min, float3 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_Result, inout FSimulationContext Context)
{
	int Constant72 = (0);
	bool Constant73 = false;
	int Constant74 = 0;
	int Constant75 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms2;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant72, In_OverrideSeed, Constant74, Constant75, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms2, Context);
	float3 Result15 = In_Max - In_Min;
	int Seed12;
	int Seed22;
	int Seed32;
	Seed12 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2.Seed1;
	Seed22 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2.Seed2;
	Seed32 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2.Seed3;
	float3 Result16 = rand_float(Result15, Seed12, Seed22, Seed32);
	float3 Result17 = rand_float(Result15);
	float3 Random_IfResult2;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms2)
	{
	Random_IfResult2 = Result16;
	}
	else
	{
	Random_IfResult2 = Result17;
	}
	float3 Result18 = In_Min + Random_IfResult2;
	Out_Result = Result18;
}

void RandomPointInSphere_Func_(float In_InnerRadius, float In_OuterRadius, int In_RandomnessMode, bool In_OverrideSeed, int In_Seed, bool In_FixedOverrideSeed, out float3 Out_Ouput, inout FSimulationContext Context)
{
	float Constant67 = 0;
	float Constant68 = -1;
	float Constant69 = 3;
	float Result12 = pow(In_InnerRadius,Constant69);
	float3 Output12;
	Output12.x = Constant67;
	Output12.y = Constant68;
	Output12.z = Result12;
	float Result13 = TWO_PI;
	float Constant70 = 1;
	float Constant71 = 3;
	float Result14 = pow(In_OuterRadius,Constant71);
	float3 Output13;
	Output13.x = Result13;
	Output13.y = Constant70;
	Output13.z = Result14;
	float3 RandomRangeFloat_Func_Output_Result2;
	RandomRangeFloat_Func_(Output12, Output13, In_Seed, In_RandomnessMode, In_OverrideSeed, In_FixedOverrideSeed, RandomRangeFloat_Func_Output_Result2, Context);
	float Phi;
	float CosASC40ThetaASC41;
	float RASC943;
	Phi = RandomRangeFloat_Func_Output_Result2.x;
	CosASC40ThetaASC41 = RandomRangeFloat_Func_Output_Result2.y;
	RASC943 = RandomRangeFloat_Func_Output_Result2.z;
	float Result19 = cos(Phi);
	float Result20 = CosASC40ThetaASC41 * CosASC40ThetaASC41;
	float Result21 = 1 - Result20;
	float Result22 = sqrt(Result21);
	float Result23 = Result19 * Result22;
	float Result24 = sin(Phi);
	float Result25 = Result24 * Result22;
	float3 Output14;
	Output14.x = Result23;
	Output14.y = Result25;
	Output14.z = CosASC40ThetaASC41;
	float Constant76 = 0.333333;
	float Result26 = pow(RASC943,Constant76);
	float3 Result27 = Output14 * Result26;
	Out_Ouput = Result27;
}

void CustomHlsl99D2D00244511A096EA5088DE8D89968_Func_(bool In_X, bool In_Y, bool In_Z, out float3 Out_Output)
{

Out_Output = float3(In_X, In_Y, In_Z);
}

void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context)
{
	int Constant80 = 0;
	bool Result32 = NiagaraAll(In_SourceSpace == Constant80);
	int Constant81 = 0;
	bool Result33 = NiagaraAll(In_DestinationSpace == Constant81);
	bool Result34 = Result32 && Result33;
	int Constant82 = 1;
	bool Result35 = NiagaraAll(In_SourceSpace == Constant82);
	int Constant83 = 1;
	bool Result36 = NiagaraAll(In_DestinationSpace == Constant83);
	bool Result37 = Result35 && Result36;
	bool Result38 = Result34 || Result37;
	int Constant84 = 2;
	bool Result39 = NiagaraAll(In_SourceSpace == Constant84);
	int Constant85 = 2;
	bool Result40 = NiagaraAll(In_DestinationSpace == Constant85);
	bool Result41 = Result39 && Result40;
	bool Result42 = Result38 || Result41;
	bool Result43 = Result32 && Result40;
	bool Result44 = Result39 && Result33;
	bool Result45 = Result43 || Result44;
	bool Result46 = In_bLocalSpace && Result45;
	bool Result47 = Result42 || Result46;
	bool Result48 = !In_bLocalSpace;
	bool Result49 = Result32 && Result36;
	bool Result50 = Result35 && Result33;
	bool Result51 = Result49 || Result50;
	bool Result52 = Result48 && Result51;
	bool Result53 = Result47 || Result52;
	bool Result54 = In_bLocalSpace && Result49;
	bool Result55 = Result39 && Result36;
	bool Result56 = Result54 || Result55;
	bool Result57 = Result48 && Result44;
	bool Result58 = Result56 || Result57;
	float4x4 Matrix_IfResult1;
	if(Result58)
	{
	Matrix_IfResult1 = In_LocalToWorldTransform;
	}
	else
	{
	Matrix_IfResult1 = In_WorldToLocalTransform;
	}
	Out_bUseOriginal = Result53;
	Out_OutTransform = Matrix_IfResult1;
}

void SphereLocation_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant79 = true;
	float4x4 Matrix_IfResult;
	float4x4 Matrix001_IfResult;
	if(In_ApplyScale)
	{
	Matrix_IfResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal;
	float4x4 TransformBase_Func_Output_OutTransform;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult, Matrix001_IfResult, Constant79, TransformBase_Func_Output_bUseOriginal, TransformBase_Func_Output_OutTransform, Context);
	float3 Result59 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform).xyz;
	float3 Vector_IfResult1;
	if(TransformBase_Func_Output_bUseOriginal)
	{
	Vector_IfResult1 = In_InVector;
	}
	else
	{
	Vector_IfResult1 = Result59;
	}
	Out_OutVector = Vector_IfResult1;
}

void SphereLocation_Emitter_Func_(inout FSimulationContext Context)
{
	float Constant63 = 0;
	float Constant64 = 1;
	int Constant65 = 0;
	bool Constant66 = false;
	int Mode_IfResult1;
	bool Override_IfResult1;
	if(Context.MapSpawn.SphereLocation.OverrideRandomness)
	{
	Mode_IfResult1 = Context.MapSpawn.SphereLocation.RandomnessMode;
	Override_IfResult1 = Context.MapSpawn.SphereLocation.OverrideSeed;
	}
	else
	{
	Mode_IfResult1 = Constant65;
	Override_IfResult1 = Constant66;
	}
	float3 RandomPointInSphere_Func_Output_Ouput;
	RandomPointInSphere_Func_(Constant63, Constant64, Mode_IfResult1, Override_IfResult1, Context.MapSpawn.Constants.Emitter.SphereLocation.RandomSeed, Context.MapSpawn.SphereLocation.FixedRandomSeed, RandomPointInSphere_Func_Output_Ouput, Context);
	Context.MapSpawn.Local.SphereLocation.SphereVector = RandomPointInSphere_Func_Output_Ouput;
	float3 Result28 = abs(Context.MapSpawn.Local.SphereLocation.SphereVector);
	float3 CustomHlsl99D2D00244511A096EA5088DE8D89968_Func_Output_Output;
	CustomHlsl99D2D00244511A096EA5088DE8D89968_Func_(Context.MapSpawn.SphereLocation.HemisphereX, Context.MapSpawn.SphereLocation.HemisphereY, Context.MapSpawn.SphereLocation.HemisphereZ, CustomHlsl99D2D00244511A096EA5088DE8D89968_Func_Output_Output);
	float3 Result29 = lerp(Context.MapSpawn.Local.SphereLocation.SphereVector,Result28,CustomHlsl99D2D00244511A096EA5088DE8D89968_Func_Output_Output);
	Context.MapSpawn.Local.SphereLocation.SphereVector = Result29;
	float3 Result30 = Context.MapSpawn.Constants.Emitter.SphereLocation.SphereRadius * Context.MapSpawn.Local.SphereLocation.SphereVector * Context.MapSpawn.Constants.Emitter.SphereLocation.NonUniformScale;
	Context.MapSpawn.Local.SphereLocation.SphereVector = Result30;
	float3 Result31 = Context.MapSpawn.SphereLocation.SphereOrigin + Context.MapSpawn.Constants.Emitter.SphereLocation.Offset;
	int Constant77 = 0;
	bool Constant78 = true;
	float3 SphereLocation_NF_TransformVector_Emitter_Func_Output_OutVector;
	SphereLocation_NF_TransformVector_Emitter_Func_(Context.MapSpawn.Local.SphereLocation.SphereVector, Context.MapSpawn.SphereLocation.CoordinateSpace, Constant77, Constant78, SphereLocation_NF_TransformVector_Emitter_Func_Output_OutVector, Context);
	float3 Result60 = Result31 + SphereLocation_NF_TransformVector_Emitter_Func_Output_OutVector;
	float3 Result61 = normalize(SphereLocation_NF_TransformVector_Emitter_Func_Output_OutVector);
	Context.MapSpawn.Particles.Position = Result60;
	Context.MapSpawn.OUTPUT_VAR.SphereLocation.SphereNormal = Result61;
}

void UniformRangedFloat003_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant90 = 0;
	bool Constant91 = false;
	int Mode_IfResult2;
	bool Override_IfResult2;
	if(Context.MapSpawn.UniformRangedFloat003.OverrideRandomness)
	{
	Mode_IfResult2 = Context.MapSpawn.UniformRangedFloat003.RandomnessMode;
	Override_IfResult2 = Context.MapSpawn.UniformRangedFloat003.OverrideSeed;
	}
	else
	{
	Mode_IfResult2 = Constant90;
	Override_IfResult2 = Constant91;
	}
	float RandomRangeFloat_Func_Output_Result3;
	RandomRangeFloat_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedFloat003.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat003.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat003.RandomSeed, Mode_IfResult2, Override_IfResult2, Context.MapSpawn.UniformRangedFloat003.FixedRandomSeed, RandomRangeFloat_Func_Output_Result3, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result3;
}

void UniformRangedFloat004_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant96 = 0;
	bool Constant97 = false;
	int Mode_IfResult3;
	bool Override_IfResult3;
	if(Context.MapSpawn.UniformRangedFloat004.OverrideRandomness)
	{
	Mode_IfResult3 = Context.MapSpawn.UniformRangedFloat004.RandomnessMode;
	Override_IfResult3 = Context.MapSpawn.UniformRangedFloat004.OverrideSeed;
	}
	else
	{
	Mode_IfResult3 = Constant96;
	Override_IfResult3 = Constant97;
	}
	float RandomRangeFloat_Func_Output_Result4;
	RandomRangeFloat_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.RandomSeed, Mode_IfResult3, Override_IfResult3, Context.MapSpawn.UniformRangedFloat004.FixedRandomSeed, RandomRangeFloat_Func_Output_Result4, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result4;
}

void UniformRangedFloat005_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant102 = 0;
	bool Constant103 = false;
	int Mode_IfResult4;
	bool Override_IfResult4;
	if(Context.MapSpawn.UniformRangedFloat005.OverrideRandomness)
	{
	Mode_IfResult4 = Context.MapSpawn.UniformRangedFloat005.RandomnessMode;
	Override_IfResult4 = Context.MapSpawn.UniformRangedFloat005.OverrideSeed;
	}
	else
	{
	Mode_IfResult4 = Constant102;
	Override_IfResult4 = Constant103;
	}
	float RandomRangeFloat_Func_Output_Result5;
	RandomRangeFloat_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.RandomSeed, Mode_IfResult4, Override_IfResult4, Context.MapSpawn.UniformRangedFloat005.FixedRandomSeed, RandomRangeFloat_Func_Output_Result5, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result5;
}

void BreakVector_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context)
{
	float3 Output15;
	Output15.x = Context.MapSpawn.BreakVector.X;
	Output15.y = Context.MapSpawn.BreakVector.Y;
	Output15.z = Context.MapSpawn.BreakVector.Z;
	Out_Vec3 = Output15;
}

void InitialMeshOrientation_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant108 = true;
	float4x4 Matrix_IfResult2;
	float4x4 Matrix001_IfResult1;
	if(In_ApplyScale)
	{
	Matrix_IfResult2 = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult1 = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult2 = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult1 = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal1;
	float4x4 TransformBase_Func_Output_OutTransform1;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult2, Matrix001_IfResult1, Constant108, TransformBase_Func_Output_bUseOriginal1, TransformBase_Func_Output_OutTransform1, Context);
	float3 Result62 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform1).xyz;
	float3 Vector_IfResult2;
	if(TransformBase_Func_Output_bUseOriginal1)
	{
	Vector_IfResult2 = In_InVector;
	}
	else
	{
	Vector_IfResult2 = Result62;
	}
	Out_OutVector = Vector_IfResult2;
}

void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context)
{
	float Result66 = length(In_V);
	bool Result67 = NiagaraAll(Result66 < In_Threshold);
	float Result68 = length(In_Fallback);
	float3 Vector_IfResult3;
	float float_IfResult;
	if(Result67)
	{
	Vector_IfResult3 = In_Fallback;
	float_IfResult = In_FallbackLength;
	}
	else
	{
	Vector_IfResult3 = In_V;
	float_IfResult = Result66;
	}
	float3 Result69 = Vector_IfResult3 / float_IfResult;
	float3 Vector_IfResult4;
	float float_IfResult1;
	if(Result67)
	{
	Vector_IfResult4 = In_Fallback;
	float_IfResult1 = Result68;
	}
	else
	{
	Vector_IfResult4 = Result69;
	float_IfResult1 = float_IfResult;
	}
	Out_Direction = Vector_IfResult4;
	Out_Length = float_IfResult1;
	Out_BelowThreshold = Result67;
}

void AxisAngleToQuaternion_Func_(float4 In_AxisAngle, bool In_NormalizeAxis, out float4 Out_Quaternion, inout FSimulationContext Context)
{
	float3 VECTOR_VAR;
	float NiagaraFloat;
	VECTOR_VAR.x = In_AxisAngle.x;
	VECTOR_VAR.y = In_AxisAngle.y;
	VECTOR_VAR.z = In_AxisAngle.z;
	NiagaraFloat = In_AxisAngle.w;
	float3 Result71 = normalize(VECTOR_VAR);
	float3 Vector_IfResult5;
	if(In_NormalizeAxis)
	{
	Vector_IfResult5 = Result71;
	}
	else
	{
	Vector_IfResult5 = VECTOR_VAR;
	}
	float Constant117 = 2;
	float Result72 = NiagaraFloat / Constant117;
	float Result73 = sin(Result72);
	float3 Result74 = Vector_IfResult5 * Result73;
	float Result75 = cos(Result72);
	float4 Output3;
	Output3.x = Result74.x;
	Output3.y = Result74.y;
	Output3.z = Result74.z;
	Output3.w = Result75;
	Out_Quaternion = Output3;
}

void CustomHlsl001624D816540ECD5F976902A85E139007C_Func_(float4 In_Quat1, float4 In_Quat2, out float4 Out_Result)
{

float4 SIGN_MASK0 = float4( 1.f, -1.f, 1.f, -1.f );
	float4 SIGN_MASK1 = float4( 1.f, 1.f, -1.f, -1.f );
	float4 SIGN_MASK2 = float4( -1.f, 1.f, 1.f, -1.f );
	Out_Result = (In_Quat1.wwww * In_Quat2);
	Out_Result = ((In_Quat1.xxxx * In_Quat2.wzyx) * SIGN_MASK0) + Out_Result;
	Out_Result = ((In_Quat1.yyyy * In_Quat2.zwxy)* SIGN_MASK1) + Out_Result;
	Out_Result = ((In_Quat1.zzzz * In_Quat2.yxwz)* SIGN_MASK2) + Out_Result;
}

void MultiplyQuaternion_Func_(float4 In_QuaternionA, float4 In_QuaternionB, out float4 Out_Quaternion, inout FSimulationContext Context)
{
	float4 CustomHlsl001624D816540ECD5F976902A85E139007C_Func_Output_Result;
	CustomHlsl001624D816540ECD5F976902A85E139007C_Func_(In_QuaternionA, In_QuaternionB, CustomHlsl001624D816540ECD5F976902A85E139007C_Func_Output_Result);
	Out_Quaternion = CustomHlsl001624D816540ECD5F976902A85E139007C_Func_Output_Result;
}

void ApplyRotationVector_NormalizeRotations_true_Func_(float3 In_RotationalVelocityVector, float In_DeltaTime, float4 In_ExistingOrientationQuat, out float4 Out_NewOrientationQuat, inout FSimulationContext Context)
{
	float Result63 = TWO_PI;
	float3 Result64 = In_RotationalVelocityVector * In_DeltaTime;
	float3 Result65 = Result63 * Result64;
	float3 Constant110 = float3(0,0,0);
	float Constant111 = 1e-05;
	float Constant112 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction;
	float DirectionAndLengthSafe_Func_Output_Length;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold;
	DirectionAndLengthSafe_Func_(Result65, Constant110, Constant111, Constant112, DirectionAndLengthSafe_Func_Output_Direction, DirectionAndLengthSafe_Func_Output_Length, DirectionAndLengthSafe_Func_Output_BelowThreshold, Context);
	float Constant113 = -1;
	float Constant114 = -1;
	float Constant115 = 1;
	float3 Output16;
	Output16.x = Constant113;
	Output16.y = Constant114;
	Output16.z = Constant115;
	float3 Result70 = DirectionAndLengthSafe_Func_Output_Direction * Output16;
	float4 Vector4;
	Vector4.x = Result70.x;
	Vector4.y = Result70.y;
	Vector4.z = Result70.z;
	Vector4.w = DirectionAndLengthSafe_Func_Output_Length;
	bool Constant116 = true;
	float4 AxisAngleToQuaternion_Func_Output_Quaternion;
	AxisAngleToQuaternion_Func_(Vector4, Constant116, AxisAngleToQuaternion_Func_Output_Quaternion, Context);
	float4 MultiplyQuaternion_Func_Output_Quaternion;
	MultiplyQuaternion_Func_(AxisAngleToQuaternion_Func_Output_Quaternion, In_ExistingOrientationQuat, MultiplyQuaternion_Func_Output_Quaternion, Context);
	float4 Quat_IfResult;
	if(DirectionAndLengthSafe_Func_Output_BelowThreshold)
	{
	Quat_IfResult = In_ExistingOrientationQuat;
	}
	else
	{
	Quat_IfResult = MultiplyQuaternion_Func_Output_Quaternion;
	}
	Out_NewOrientationQuat = Quat_IfResult;
}

void InitialMeshOrientation_Emitter_Func_(inout FSimulationContext Context)
{
	int Constant105 = 0;
	int Constant106 = 0;
	bool Constant107 = false;
	float3 InitialMeshOrientation_TransformVector_Emitter_Func_Output_OutVector;
	InitialMeshOrientation_TransformVector_Emitter_Func_(Context.MapSpawn.InitialMeshOrientation.Rotation, Constant105, Constant106, Constant107, InitialMeshOrientation_TransformVector_Emitter_Func_Output_OutVector, Context);
	float Constant109 = 1;
	float4 ApplyRotationVector_NormalizeRotations_true_Func_Output_NewOrientationQuat;
	ApplyRotationVector_NormalizeRotations_true_Func_(InitialMeshOrientation_TransformVector_Emitter_Func_Output_OutVector, Constant109, Context.MapSpawn.Particles.MeshOrientation, ApplyRotationVector_NormalizeRotations_true_Func_Output_NewOrientationQuat, Context);
	Context.MapSpawn.Particles.InitialRotation = ApplyRotationVector_NormalizeRotations_true_Func_Output_NewOrientationQuat;
	Context.MapSpawn.Particles.MeshOrientation = ApplyRotationVector_NormalizeRotations_true_Func_Output_NewOrientationQuat;
	Context.MapSpawn.InitialMeshOrientation.OrientationVector = Context.MapSpawn.Constants.Emitter.InitialMeshOrientation.OrientationVector;
	bool Constant118 = false;
	Context.MapSpawn.Local.InitialMeshOrientation.Temp = Constant118;
}

void UniformRangedFloat001_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant123 = 0;
	bool Constant124 = false;
	int Mode_IfResult5;
	bool Override_IfResult5;
	if(Context.MapSpawn.UniformRangedFloat001.OverrideRandomness)
	{
	Mode_IfResult5 = Context.MapSpawn.UniformRangedFloat001.RandomnessMode;
	Override_IfResult5 = Context.MapSpawn.UniformRangedFloat001.OverrideSeed;
	}
	else
	{
	Mode_IfResult5 = Constant123;
	Override_IfResult5 = Constant124;
	}
	float RandomRangeFloat_Func_Output_Result6;
	RandomRangeFloat_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedFloat001.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat001.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat001.RandomSeed, Mode_IfResult5, Override_IfResult5, Context.MapSpawn.UniformRangedFloat001.FixedRandomSeed, RandomRangeFloat_Func_Output_Result6, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result6;
}

void AddVelocityFromPoint_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant126 = true;
	float3 Constant127 = float3(0,0,0);
	float3 Vector_IfResult6;
	if(Constant126)
	{
	Vector_IfResult6 = Constant127;
	}
	else
	{
	Vector_IfResult6 = Context.MapSpawn.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult6;
}

void AddVelocityFromPoint_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant132 = true;
	float4x4 Matrix_IfResult3;
	float4x4 Matrix001_IfResult2;
	if(In_ApplyScale)
	{
	Matrix_IfResult3 = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult2 = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult3 = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult2 = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal2;
	float4x4 TransformBase_Func_Output_OutTransform2;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult3, Matrix001_IfResult2, Constant132, TransformBase_Func_Output_bUseOriginal2, TransformBase_Func_Output_OutTransform2, Context);
	float3 Result76 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform2).xyz;
	float3 Vector_IfResult7;
	if(TransformBase_Func_Output_bUseOriginal2)
	{
	Vector_IfResult7 = In_InVector;
	}
	else
	{
	Vector_IfResult7 = Result76;
	}
	Out_OutVector = Vector_IfResult7;
}

void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float2 Out_Result, inout FSimulationContext Context)
{
	int Constant139 = (0);
	bool Constant140 = false;
	int Constant141 = 0;
	int Constant142 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo3;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms3;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant139, In_OverrideSeed, Constant141, Constant142, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo3, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms3, Context);
	float2 Result78 = In_Max - In_Min;
	int Seed13;
	int Seed23;
	int Seed33;
	Seed13 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo3.Seed1;
	Seed23 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo3.Seed2;
	Seed33 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo3.Seed3;
	float2 Result79 = rand_float(Result78, Seed13, Seed23, Seed33);
	float2 Result80 = rand_float(Result78);
	float2 Random_IfResult3;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms3)
	{
	Random_IfResult3 = Result79;
	}
	else
	{
	Random_IfResult3 = Result80;
	}
	float2 Result81 = In_Min + Random_IfResult3;
	Out_Result = Result81;
}

void RandomUnitVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context)
{
	float2 Constant136 = float2(0,-1);
	float2 Constant137 = float2(6.28319,1);
	bool Constant138 = false;
	float2 RandomRangeFloat_Func_Output_Result7;
	RandomRangeFloat_Func_(Constant136, Constant137, In_Seed, In_RandomnessMode, In_OverrideSeed, Constant138, RandomRangeFloat_Func_Output_Result7, Context);
	float Phi1;
	float CosASC40ThetaASC411;
	Phi1 = RandomRangeFloat_Func_Output_Result7.x;
	CosASC40ThetaASC411 = RandomRangeFloat_Func_Output_Result7.y;
	float Result82 = cos(Phi1);
	float Result83 = CosASC40ThetaASC411 * CosASC40ThetaASC411;
	float Result84 = 1 - Result83;
	float Result85 = sqrt(Result84);
	float Result86 = Result82 * Result85;
	float Result87 = sin(Phi1);
	float Result88 = Result87 * Result85;
	float3 PositionOnSphere;
	PositionOnSphere.x = Result86;
	PositionOnSphere.y = Result88;
	PositionOnSphere.z = CosASC40ThetaASC411;
	float Constant143 = 0;
	float Constant144 = 6.28319;
	int Constant145 = -1;
	int Constant146 = 0;
	bool Constant147 = false;
	float RandomRangeFloat_Func_Output_Result8;
	RandomRangeFloat_Func_(Constant143, Constant144, Constant145, Constant146, Constant147, RandomRangeFloat_Func_Output_Result8, Context);
	float Result89 = cos(RandomRangeFloat_Func_Output_Result8);
	float Result90 = sin(RandomRangeFloat_Func_Output_Result8);
	float2 PositionOnCircle;
	PositionOnCircle.x = Result89;
	PositionOnCircle.y = Result90;
	Out_UnitVector3D = PositionOnSphere;
	Out_UnitVector2D = PositionOnCircle;
}

void RandomVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_Vector, inout FSimulationContext Context)
{
	float3 RandomUnitVector_Func_Output_UnitVector3D;
	float2 RandomUnitVector_Func_Output_UnitVector2D;
	RandomUnitVector_Func_(In_Seed, In_RandomnessMode, In_OverrideSeed, RandomUnitVector_Func_Output_UnitVector3D, RandomUnitVector_Func_Output_UnitVector2D, Context);
	Out_Vector = RandomUnitVector_Func_Output_UnitVector3D;
}

void NormalizeDistanceRange_Func_(float3 In_StartPosition, float3 In_EndPosition, float In_Distance, float3 In_FallbackVector, out float Out_NormalizedRange, out float Out_InverseNormalizedRange, out float3 Out_NormalizedVectorBetweenPositions, out bool Out_WithinRange, inout FSimulationContext Context)
{
	float3 Result91 = In_StartPosition - In_EndPosition;
	float Constant148 = 1e-05;
	float Constant149 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction1;
	float DirectionAndLengthSafe_Func_Output_Length1;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold1;
	DirectionAndLengthSafe_Func_(Result91, In_FallbackVector, Constant148, Constant149, DirectionAndLengthSafe_Func_Output_Direction1, DirectionAndLengthSafe_Func_Output_Length1, DirectionAndLengthSafe_Func_Output_BelowThreshold1, Context);
	float Constant150 = 0;
	float float_IfResult2;
	if(DirectionAndLengthSafe_Func_Output_BelowThreshold1)
	{
	float_IfResult2 = Constant150;
	}
	else
	{
	float_IfResult2 = DirectionAndLengthSafe_Func_Output_Length1;
	}
	float Result92 = min(float_IfResult2, In_Distance);
	float Constant151 = 0.0001;
	float Result93 = max(In_Distance, Constant151);
	float Result94 = Result92 / Result93;
	float Result95 = 1 - Result94;
	bool Result96 = NiagaraAll(float_IfResult2 <= In_Distance);
	Out_NormalizedRange = Result94;
	Out_InverseNormalizedRange = Result95;
	Out_NormalizedVectorBetweenPositions = DirectionAndLengthSafe_Func_Output_Direction1;
	Out_WithinRange = Result96;
}

void DistanceBasedFalloff_Func_(float3 In_StartPosition, float3 In_EndPosition, float In_Distance, bool In_InvertFalloff, float In_FalloffScale, float3 In_FallbackVector, out float Out_Falloff, out float3 Out_NormalizedVectorBetweenPositions, out float Out_NormalizedDistanceRange, out bool Out_PositionIsWithinRange, inout FSimulationContext Context)
{
	float NormalizeDistanceRange_Func_Output_NormalizedRange;
	float NormalizeDistanceRange_Func_Output_InverseNormalizedRange;
	float3 NormalizeDistanceRange_Func_Output_NormalizedVectorBetweenPositions;
	bool NormalizeDistanceRange_Func_Output_WithinRange;
	NormalizeDistanceRange_Func_(In_StartPosition, In_EndPosition, In_Distance, In_FallbackVector, NormalizeDistanceRange_Func_Output_NormalizedRange, NormalizeDistanceRange_Func_Output_InverseNormalizedRange, NormalizeDistanceRange_Func_Output_NormalizedVectorBetweenPositions, NormalizeDistanceRange_Func_Output_WithinRange, Context);
	float float_IfResult3;
	if(In_InvertFalloff)
	{
	float_IfResult3 = NormalizeDistanceRange_Func_Output_InverseNormalizedRange;
	}
	else
	{
	float_IfResult3 = NormalizeDistanceRange_Func_Output_NormalizedRange;
	}
	float Result97 = float_IfResult3 * In_FalloffScale;
	Out_Falloff = Result97;
	Out_NormalizedVectorBetweenPositions = NormalizeDistanceRange_Func_Output_NormalizedVectorBetweenPositions;
	Out_NormalizedDistanceRange = float_IfResult3;
	Out_PositionIsWithinRange = NormalizeDistanceRange_Func_Output_WithinRange;
}

void AddVelocityFromPoint_Emitter_Func_(inout FSimulationContext Context)
{
	int Constant130 = 0;
	bool Constant131 = false;
	float3 AddVelocityFromPoint_NF_TransformVector_Emitter_Func_Output_OutVector;
	AddVelocityFromPoint_NF_TransformVector_Emitter_Func_(Context.MapSpawn.Constants.Emitter.AddVelocityFromPoint.OriginOffset, Context.MapSpawn.AddVelocityFromPoint.OriginOffsetCoordinateSpace, Constant130, Constant131, AddVelocityFromPoint_NF_TransformVector_Emitter_Func_Output_OutVector, Context);
	float3 Result77 = AddVelocityFromPoint_NF_TransformVector_Emitter_Func_Output_OutVector + Context.MapSpawn.AddVelocityFromPoint.VelocityOrigin;
	int Constant133 = -1;
	int Constant134 = 0;
	bool Constant135 = false;
	float3 RandomVector_Func_Output_Vector;
	RandomVector_Func_(Constant133, Constant134, Constant135, RandomVector_Func_Output_Vector, Context);
	float DistanceBasedFalloff_Func_Output_Falloff;
	float3 DistanceBasedFalloff_Func_Output_NormalizedVectorBetweenPositions;
	float DistanceBasedFalloff_Func_Output_NormalizedDistanceRange;
	bool DistanceBasedFalloff_Func_Output_PositionIsWithinRange;
	DistanceBasedFalloff_Func_(Context.MapSpawn.AddVelocityFromPoint.DefaultPosition, Result77, Context.MapSpawn.Constants.Emitter.AddVelocityFromPoint.VelocityFalloffDistance, Context.MapSpawn.AddVelocityFromPoint.InvertVelocityFalloff, Context.MapSpawn.AddVelocityFromPoint.VelocityStrength, RandomVector_Func_Output_Vector, DistanceBasedFalloff_Func_Output_Falloff, DistanceBasedFalloff_Func_Output_NormalizedVectorBetweenPositions, DistanceBasedFalloff_Func_Output_NormalizedDistanceRange, DistanceBasedFalloff_Func_Output_PositionIsWithinRange, Context);
	float float_IfResult4;
	if(Context.MapSpawn.AddVelocityFromPoint.UseFalloffDistance)
	{
	float_IfResult4 = DistanceBasedFalloff_Func_Output_Falloff;
	}
	else
	{
	float_IfResult4 = Context.MapSpawn.AddVelocityFromPoint.VelocityStrength;
	}
	float3 Result98 = float_IfResult4 * DistanceBasedFalloff_Func_Output_NormalizedVectorBetweenPositions;
	float3 Result99 = Context.MapSpawn.Particles.Velocity + Result98;
	Context.MapSpawn.Particles.Velocity = Result99;
	Context.MapSpawn.OUTPUT_VAR.AddVelocityFromPoint.NormalizedFalloff = DistanceBasedFalloff_Func_Output_NormalizedDistanceRange;
}

void UniformRangedLinearColor_Emitter_Func_(out float4 Out_UniformRangedLinearColor, inout FSimulationContext Context)
{
	float Constant156 = 0;
	float Constant157 = 1;
	int Constant158 = 0;
	bool Constant159 = false;
	int Mode_IfResult6;
	bool Override_IfResult6;
	if(Context.MapSpawn.UniformRangedLinearColor.OverrideRandomness)
	{
	Mode_IfResult6 = Context.MapSpawn.UniformRangedLinearColor.RandomnessMode;
	Override_IfResult6 = Context.MapSpawn.UniformRangedLinearColor.OverrideSeed;
	}
	else
	{
	Mode_IfResult6 = Constant158;
	Override_IfResult6 = Constant159;
	}
	float RandomRangeFloat_Func_Output_Result9;
	RandomRangeFloat_Func_(Constant156, Constant157, Context.MapSpawn.Constants.Emitter.UniformRangedLinearColor.RandomSeed, Mode_IfResult6, Override_IfResult6, Context.MapSpawn.UniformRangedLinearColor.FixedRandomSeed, RandomRangeFloat_Func_Output_Result9, Context);
	float4 Result100 = lerp(Context.MapSpawn.Constants.Emitter.UniformRangedLinearColor.Maximum,Context.MapSpawn.Constants.Emitter.UniformRangedLinearColor.Minimum,RandomRangeFloat_Func_Output_Result9);
	Out_UniformRangedLinearColor = Result100;
}

void Color_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Output0;
	float Output2;
	Output0.x = Context.MapSpawn.Color.Color.r;
	Output0.y = Context.MapSpawn.Color.Color.g;
	Output0.z = Context.MapSpawn.Color.Color.b;
	Output2 = Context.MapSpawn.Color.Color.a;
	float3 Result101 = Output0 * Context.MapSpawn.Constants.Emitter.Color.ScaleColor;
	float Result102 = Output2 * Context.MapSpawn.Constants.Emitter.Color.ScaleAlpha;
	float Result103 = Result102 * Context.MapSpawn.Emitter.AlphaScale;
	float4 Output01;
	Output01.g = Result101.y;
	Output01.a = Result103;
	Output01.r = Result101.x;
	Output01.b = Result101.z;
	Context.MapSpawn.Particles.Color = Output01;
}

void ParticleState_Emitter_Func_(inout FSimulationContext Context)
{
	bool Result104 = NiagaraAll(Context.MapUpdate.Particles.Age <= Context.MapUpdate.Engine.DeltaTime);
	Context.MapUpdate.OUTPUT_VAR.ParticleState.FirstFrame = Result104;
	float Result105 = Context.MapUpdate.Particles.Age + Context.MapUpdate.ParticleState.DeltaTime;
	float Constant161 = 1e-05;
	float Result106 = max(Context.MapUpdate.ParticleState.Lifetime, Constant161);
	float Constant162 = 0.0001;
	float Result107 = Result106 - Constant162;
	bool Result108 = NiagaraAll(Result105 < Result107);
	bool Constant163 = false;
	bool bool_IfResult;
	if(Result108)
	{
	bool_IfResult = Context.MapUpdate.DataInstance.Alive;
	}
	else
	{
	bool_IfResult = Constant163;
	}
	float Result109 = Result105 / Result106;
	Context.MapUpdate.DataInstance.Alive = bool_IfResult;
	Context.MapUpdate.Particles.Age = Result105;
	Context.MapUpdate.Particles.NormalizedAge = Result109;
}

void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterScaleAlphaFloatCurve001Output_Value;
	SampleCurve_EmitterScaleAlphaFloatCurve001(Context.MapUpdate.FloatFromCurve001.CurveIndex, SampleCurve_EmitterScaleAlphaFloatCurve001Output_Value);
	float Result110 = SampleCurve_EmitterScaleAlphaFloatCurve001Output_Value * Context.MapUpdate.Constants.Emitter.FloatFromCurve001.ScaleCurve;
	Out_Value = Result110;
}

void ScaleColor_Emitter_Func_(inout FSimulationContext Context)
{
	float4 Output02;
	Output02.r = Context.MapUpdate.Constants.Emitter.ScaleColor.ScaleRGB.x;
	Output02.g = Context.MapUpdate.Constants.Emitter.ScaleColor.ScaleRGB.y;
	Output02.b = Context.MapUpdate.Constants.Emitter.ScaleColor.ScaleRGB.z;
	Output02.a = Context.MapUpdate.ScaleColor.ScaleAlpha;
	float4 Result111 = Context.MapUpdate.Transient.ParticleColorScaleFactor * Output02;
	float4 Result112 = Context.MapUpdate.ScaleColor.ColorValueToScale * Result111;
	Context.MapUpdate.Particles.Color = Result112;
	Context.MapUpdate.Transient.ParticleColorScaleFactor = Result111;
}

void FloatFromCurve_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterValueScaleFactorFloatCurveOutput_Value;
	SampleCurve_EmitterValueScaleFactorFloatCurve(Context.MapUpdate.FloatFromCurve.CurveIndex, SampleCurve_EmitterValueScaleFactorFloatCurveOutput_Value);
	float Result113 = SampleCurve_EmitterValueScaleFactorFloatCurveOutput_Value * Context.MapUpdate.Constants.Emitter.FloatFromCurve.ScaleCurve;
	Out_Value = Result113;
}

void VectorFromFloat001_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context)
{
	float3 Output17;
	Output17.x = Context.MapUpdate.VectorFromFloat001.Value;
	Output17.y = Context.MapUpdate.VectorFromFloat001.Value;
	Output17.z = Context.MapUpdate.VectorFromFloat001.Value;
	Out_Vec3 = Output17;
}

void ScaleMeshSize_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Result114 = Context.MapUpdate.ScaleMeshSize.ScaleFactor * Context.MapUpdate.Transient.MeshScaleFactor;
	float3 Result115 = Context.MapUpdate.ScaleMeshSize.InitialMeshScale * Result114;
	Context.MapUpdate.Particles.Scale = Result115;
	Context.MapUpdate.Transient.MeshScaleFactor = Result114;
}

void FloatFromCurve002_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterValueVelocityScaleFloatCurveOutput_Value;
	SampleCurve_EmitterValueVelocityScaleFloatCurve(Context.MapUpdate.FloatFromCurve002.CurveIndex, SampleCurve_EmitterValueVelocityScaleFloatCurveOutput_Value);
	float Result116 = SampleCurve_EmitterValueVelocityScaleFloatCurveOutput_Value * Context.MapUpdate.Constants.Emitter.FloatFromCurve002.ScaleCurve;
	Out_Value = Result116;
}

void VectorFromFloat002_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context)
{
	float3 Output18;
	Output18.x = Context.MapUpdate.VectorFromFloat002.Value;
	Output18.y = Context.MapUpdate.VectorFromFloat002.Value;
	Output18.z = Context.MapUpdate.VectorFromFloat002.Value;
	Out_Vec3 = Output18;
}

void ScaleVelocity_NF_TransformOffset_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant170 = true;
	float4x4 Matrix_IfResult4;
	float4x4 Matrix001_IfResult3;
	if(In_ApplyScale)
	{
	Matrix_IfResult4 = Context.MapUpdate.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult3 = Context.MapUpdate.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult4 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult3 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal3;
	float4x4 TransformBase_Func_Output_OutTransform3;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult4, Matrix001_IfResult3, Constant170, TransformBase_Func_Output_bUseOriginal3, TransformBase_Func_Output_OutTransform3, Context);
	float3 Result117 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform3).xyz;
	float3 Vector_IfResult8;
	if(TransformBase_Func_Output_bUseOriginal3)
	{
	Vector_IfResult8 = In_InVector;
	}
	else
	{
	Vector_IfResult8 = Result117;
	}
	Out_OutVector = Vector_IfResult8;
}

void ScaleVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	int Constant168 = 0;
	bool Constant169 = false;
	float3 ScaleVelocity_NF_TransformOffset_Emitter_Func_Output_OutVector;
	ScaleVelocity_NF_TransformOffset_Emitter_Func_(Context.MapUpdate.ScaleVelocity.VelocityScale, Context.MapUpdate.ScaleVelocity.CoordinateSpace, Constant168, Constant169, ScaleVelocity_NF_TransformOffset_Emitter_Func_Output_OutVector, Context);
	float3 Result118 = ScaleVelocity_NF_TransformOffset_Emitter_Func_Output_OutVector * Context.MapUpdate.Particles.Initial.Velocity;
	Context.MapUpdate.Particles.Velocity = Result118;
}

void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.SolveForcesAndVelocity.DeltaTime;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Context.MapUpdate.SolveForcesAndVelocity.Mass;
	float Constant179 = 0.0001;
	float Result119 = max(Context.MapUpdate.Local.SolveForcesAndVelocity.Mass, Constant179);
	float Result120 = Reciprocal(Result119);
	float3 Result121 = Result120 * Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Result121;
	float3 Result122 = Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float Constant180 = 0;
	float Result123 = max(Context.MapUpdate.Transient.PhysicsDrag, Constant180);
	float Result124 = Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime * Result123;
	float Constant181 = 1;
	float Result125 = Result124 + Constant181;
	float3 Result126 = Result122 / Result125;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Result126;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsDrag = Context.MapUpdate.Transient.PhysicsDrag;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float3 Result127 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.SolveForcesAndVelocity.Position;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Result127;
	float3 Position_IfResult;
	float3 Velocity_IfResult;
	float3 PreviousVelocity_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	Position_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Velocity_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	}
	else
	{
	Position_IfResult = Context.MapUpdate.SolveForcesAndVelocity.Position;
	Velocity_IfResult = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity;
	}
	Context.MapUpdate.Particles.Position = Position_IfResult;
	Context.MapUpdate.Particles.Velocity = Velocity_IfResult;
	Context.MapUpdate.Particles.PreviousVelocity = PreviousVelocity_IfResult;
	float3 Constant182 = float3(0,0,0);
	float Constant183 = 0;
	float3 ForceVector_IfResult;
	float Drag_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	ForceVector_IfResult = Constant182;
	Drag_IfResult = Constant183;
	}
	else
	{
	ForceVector_IfResult = Context.MapUpdate.Transient.PhysicsForce;
	Drag_IfResult = Context.MapUpdate.Transient.PhysicsDrag;
	}
	Context.MapUpdate.Transient.PhysicsForce = ForceVector_IfResult;
	Context.MapUpdate.Transient.PhysicsDrag = Drag_IfResult;
}

void UniformRangedFloat006_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant188 = 0;
	bool Constant189 = false;
	int Mode_IfResult7;
	bool Override_IfResult7;
	if(Context.MapUpdate.UniformRangedFloat006.OverrideRandomness)
	{
	Mode_IfResult7 = Context.MapUpdate.UniformRangedFloat006.RandomnessMode;
	Override_IfResult7 = Context.MapUpdate.UniformRangedFloat006.OverrideSeed;
	}
	else
	{
	Mode_IfResult7 = Constant188;
	Override_IfResult7 = Constant189;
	}
	float RandomRangeFloat_Func_Output_Result10;
	RandomRangeFloat_Func_(Context.MapUpdate.Constants.Emitter.UniformRangedFloat006.Minimum, Context.MapUpdate.Constants.Emitter.UniformRangedFloat006.Maximum, Context.MapUpdate.Constants.Emitter.UniformRangedFloat006.RandomSeed, Mode_IfResult7, Override_IfResult7, Context.MapUpdate.UniformRangedFloat006.FixedRandomSeed, RandomRangeFloat_Func_Output_Result10, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result10;
}

void UniformRangedFloat007_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant194 = 0;
	bool Constant195 = false;
	int Mode_IfResult8;
	bool Override_IfResult8;
	if(Context.MapUpdate.UniformRangedFloat007.OverrideRandomness)
	{
	Mode_IfResult8 = Context.MapUpdate.UniformRangedFloat007.RandomnessMode;
	Override_IfResult8 = Context.MapUpdate.UniformRangedFloat007.OverrideSeed;
	}
	else
	{
	Mode_IfResult8 = Constant194;
	Override_IfResult8 = Constant195;
	}
	float RandomRangeFloat_Func_Output_Result11;
	RandomRangeFloat_Func_(Context.MapUpdate.Constants.Emitter.UniformRangedFloat007.Minimum, Context.MapUpdate.Constants.Emitter.UniformRangedFloat007.Maximum, Context.MapUpdate.Constants.Emitter.UniformRangedFloat007.RandomSeed, Mode_IfResult8, Override_IfResult8, Context.MapUpdate.UniformRangedFloat007.FixedRandomSeed, RandomRangeFloat_Func_Output_Result11, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result11;
}

void UniformRangedFloat008_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant200 = 0;
	bool Constant201 = false;
	int Mode_IfResult9;
	bool Override_IfResult9;
	if(Context.MapUpdate.UniformRangedFloat008.OverrideRandomness)
	{
	Mode_IfResult9 = Context.MapUpdate.UniformRangedFloat008.RandomnessMode;
	Override_IfResult9 = Context.MapUpdate.UniformRangedFloat008.OverrideSeed;
	}
	else
	{
	Mode_IfResult9 = Constant200;
	Override_IfResult9 = Constant201;
	}
	float RandomRangeFloat_Func_Output_Result12;
	RandomRangeFloat_Func_(Context.MapUpdate.Constants.Emitter.UniformRangedFloat008.Minimum, Context.MapUpdate.Constants.Emitter.UniformRangedFloat008.Maximum, Context.MapUpdate.Constants.Emitter.UniformRangedFloat008.RandomSeed, Mode_IfResult9, Override_IfResult9, Context.MapUpdate.UniformRangedFloat008.FixedRandomSeed, RandomRangeFloat_Func_Output_Result12, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result12;
}

void BreakVector001_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context)
{
	float3 Output19;
	Output19.x = Context.MapUpdate.BreakVector001.X;
	Output19.y = Context.MapUpdate.BreakVector001.Y;
	Output19.z = Context.MapUpdate.BreakVector001.Z;
	Out_Vec3 = Output19;
}

void MeshRotationForce_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant207 = true;
	float4x4 Matrix_IfResult5;
	float4x4 Matrix001_IfResult4;
	if(In_ApplyScale)
	{
	Matrix_IfResult5 = Context.MapUpdate.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult4 = Context.MapUpdate.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult5 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult4 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal4;
	float4x4 TransformBase_Func_Output_OutTransform4;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult5, Matrix001_IfResult4, Constant207, TransformBase_Func_Output_bUseOriginal4, TransformBase_Func_Output_OutTransform4, Context);
	float3 Result131 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform4).xyz;
	float3 Vector_IfResult9;
	if(TransformBase_Func_Output_bUseOriginal4)
	{
	Vector_IfResult9 = In_InVector;
	}
	else
	{
	Vector_IfResult9 = Result131;
	}
	Out_OutVector = Vector_IfResult9;
}

void MeshRotationForce_Emitter_Func_(inout FSimulationContext Context)
{
	float Constant203 = 0.01;
	float Result128 = Context.MapUpdate.Constants.Emitter.MeshRotationForce.LeverRadiusASC40cmASC41 * Constant203;
	float Result129 = Result128 * Result128;
	float3 Result130 = Result129 * Context.MapUpdate.MeshRotationForce.Rotation;
	int Constant204 = 0;
	int Constant205 = 0;
	bool Constant206 = false;
	float3 MeshRotationForce_TransformVector_Emitter_Func_Output_OutVector;
	MeshRotationForce_TransformVector_Emitter_Func_(Result130, Constant204, Constant205, Constant206, MeshRotationForce_TransformVector_Emitter_Func_Output_OutVector, Context);
	float3 Result132 = Context.MapUpdate.Transient.PhysicsRotationalForce + MeshRotationForce_TransformVector_Emitter_Func_Output_OutVector;
	Context.MapUpdate.Transient.PhysicsRotationalForce = Result132;
}

void ApplyRotationVector_NormalizeRotations_false_Func_(float3 In_RotationalVelocityVector, float In_DeltaTime, float4 In_ExistingOrientationQuat, out float4 Out_NewOrientationQuat, inout FSimulationContext Context)
{
	float3 Result141 = In_RotationalVelocityVector * In_DeltaTime;
	float3 Constant217 = float3(0,0,0);
	float Constant218 = 1e-05;
	float Constant219 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction2;
	float DirectionAndLengthSafe_Func_Output_Length2;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold2;
	DirectionAndLengthSafe_Func_(Result141, Constant217, Constant218, Constant219, DirectionAndLengthSafe_Func_Output_Direction2, DirectionAndLengthSafe_Func_Output_Length2, DirectionAndLengthSafe_Func_Output_BelowThreshold2, Context);
	float Constant220 = -1;
	float Constant221 = -1;
	float Constant222 = 1;
	float3 Output110;
	Output110.x = Constant220;
	Output110.y = Constant221;
	Output110.z = Constant222;
	float3 Result142 = DirectionAndLengthSafe_Func_Output_Direction2 * Output110;
	float4 Vector41;
	Vector41.x = Result142.x;
	Vector41.y = Result142.y;
	Vector41.z = Result142.z;
	Vector41.w = DirectionAndLengthSafe_Func_Output_Length2;
	bool Constant223 = true;
	float4 AxisAngleToQuaternion_Func_Output_Quaternion1;
	AxisAngleToQuaternion_Func_(Vector41, Constant223, AxisAngleToQuaternion_Func_Output_Quaternion1, Context);
	float4 MultiplyQuaternion_Func_Output_Quaternion1;
	MultiplyQuaternion_Func_(AxisAngleToQuaternion_Func_Output_Quaternion1, In_ExistingOrientationQuat, MultiplyQuaternion_Func_Output_Quaternion1, Context);
	float4 Quat_IfResult1;
	if(DirectionAndLengthSafe_Func_Output_BelowThreshold2)
	{
	Quat_IfResult1 = In_ExistingOrientationQuat;
	}
	else
	{
	Quat_IfResult1 = MultiplyQuaternion_Func_Output_Quaternion1;
	}
	Out_NewOrientationQuat = Quat_IfResult1;
}

void SolveRotationalForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Local.SolveRotationalForcesAndVelocity.DeltaTime = Context.MapUpdate.SolveRotationalForcesAndVelocity.DeltaTime;
	float Constant214 = 1e-05;
	float Result133 = max(Context.MapUpdate.SolveRotationalForcesAndVelocity.RotationalInertia, Constant214);
	float3 Result134 = Context.MapUpdate.Transient.PhysicsRotationalForce / Result133;
	float3 Result135 = Result134 * Context.MapUpdate.Local.SolveRotationalForcesAndVelocity.DeltaTime;
	Context.MapUpdate.Local.SolveRotationalForcesAndVelocity.ForceRotationsInRadians = Result135;
	Context.MapUpdate.OUTPUT_VAR.SolveRotationalForcesAndVelocity.IncomingPhysicsRotationalForce = Context.MapUpdate.Transient.PhysicsRotationalForce;
	float3 Result136 = Context.MapUpdate.SolveRotationalForcesAndVelocity.RotationalVelocity + Context.MapUpdate.Local.SolveRotationalForcesAndVelocity.ForceRotationsInRadians;
	Context.MapUpdate.OUTPUT_VAR.SolveRotationalForcesAndVelocity.RotationalVelocity = Result136;
	float Constant215 = 0;
	float Result137 = max(Context.MapUpdate.Transient.PhysicsRotationalDrag, Constant215);
	float Result138 = Result137 * Context.MapUpdate.Local.SolveRotationalForcesAndVelocity.DeltaTime;
	float Constant216 = 1;
	float Result139 = Result138 + Constant216;
	float3 Result140 = Context.MapUpdate.OUTPUT_VAR.SolveRotationalForcesAndVelocity.RotationalVelocity / Result139;
	Context.MapUpdate.OUTPUT_VAR.SolveRotationalForcesAndVelocity.RotationalVelocity = Result140;
	Context.MapUpdate.OUTPUT_VAR.SolveRotationalForcesAndVelocity.IncomingPhysicsRotationalDrag = Context.MapUpdate.Transient.PhysicsRotationalDrag;
	float4 ApplyRotationVector_NormalizeRotations_false_Func_Output_NewOrientationQuat;
	ApplyRotationVector_NormalizeRotations_false_Func_(Context.MapUpdate.SolveRotationalForcesAndVelocity.RotationalVelocity, Context.MapUpdate.Local.SolveRotationalForcesAndVelocity.DeltaTime, Context.MapUpdate.SolveRotationalForcesAndVelocity.MeshOrientation, ApplyRotationVector_NormalizeRotations_false_Func_Output_NewOrientationQuat, Context);
	Context.MapUpdate.OUTPUT_VAR.SolveRotationalForcesAndVelocity.MeshOrientation = ApplyRotationVector_NormalizeRotations_false_Func_Output_NewOrientationQuat;
	float4 MeshOrientation_IfResult;
	float3 AngularVelocity_IfResult;
	if(Context.MapUpdate.SolveRotationalForcesAndVelocity.WritetoIntrinsicProperties)
	{
	MeshOrientation_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveRotationalForcesAndVelocity.MeshOrientation;
	AngularVelocity_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveRotationalForcesAndVelocity.RotationalVelocity;
	}
	else
	{
	MeshOrientation_IfResult = Context.MapUpdate.SolveRotationalForcesAndVelocity.MeshOrientation;
	AngularVelocity_IfResult = Context.MapUpdate.SolveRotationalForcesAndVelocity.RotationalVelocity;
	}
	Context.MapUpdate.Particles.MeshOrientation = MeshOrientation_IfResult;
	Context.MapUpdate.Particles.RotationalVelocity = AngularVelocity_IfResult;
	float3 Constant224 = float3(0,0,0);
	float Constant225 = 0;
	float3 ForceVector_IfResult1;
	float Drag_IfResult1;
	if(Context.MapUpdate.SolveRotationalForcesAndVelocity.WritetoIntrinsicProperties)
	{
	ForceVector_IfResult1 = Constant224;
	Drag_IfResult1 = Constant225;
	}
	else
	{
	ForceVector_IfResult1 = Context.MapUpdate.Transient.PhysicsRotationalForce;
	Drag_IfResult1 = Context.MapUpdate.Transient.PhysicsRotationalDrag;
	}
	Context.MapUpdate.Transient.PhysicsRotationalForce = ForceVector_IfResult1;
	Context.MapUpdate.Transient.PhysicsRotationalDrag = Drag_IfResult1;
}

void PendulumSetup_NF_InitialParticlePosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant227 = true;
	float3 Constant228 = float3(0,0,0);
	float3 Vector_IfResult10;
	if(Constant227)
	{
	Vector_IfResult10 = Constant228;
	}
	else
	{
	Vector_IfResult10 = Context.MapUpdate.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult10;
}

void PendulumSetup_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant234 = true;
	float4x4 Matrix_IfResult6;
	float4x4 Matrix001_IfResult5;
	if(In_ApplyScale)
	{
	Matrix_IfResult6 = Context.MapUpdate.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult5 = Context.MapUpdate.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult6 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult5 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal5;
	float4x4 TransformBase_Func_Output_OutTransform5;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult6, Matrix001_IfResult5, Constant234, TransformBase_Func_Output_bUseOriginal5, TransformBase_Func_Output_OutTransform5, Context);
	float3 Result143 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform5).xyz;
	float3 Vector_IfResult11;
	if(TransformBase_Func_Output_bUseOriginal5)
	{
	Vector_IfResult11 = In_InVector;
	}
	else
	{
	Vector_IfResult11 = Result143;
	}
	Out_OutVector = Vector_IfResult11;
}

void PendulumSetup_Emitter_Func_(inout FSimulationContext Context)
{
	int Constant232 = 0;
	bool Constant233 = false;
	float3 PendulumSetup_TransformVector_Emitter_Func_Output_OutVector;
	PendulumSetup_TransformVector_Emitter_Func_(Context.MapUpdate.Constants.Emitter.PendulumSetup.PendulumPivotOffset, Context.MapUpdate.PendulumSetup.PendulumPivotOffsetCoordinateSpace, Constant232, Constant233, PendulumSetup_TransformVector_Emitter_Func_Output_OutVector, Context);
	float3 Result144 = PendulumSetup_TransformVector_Emitter_Func_Output_OutVector + Context.MapUpdate.PendulumSetup.PendulumPivot;
	float3 Result145 = normalize(Context.MapUpdate.Constants.Emitter.PendulumSetup.PendulumRestAxis);
	Context.MapUpdate.Transient.PhysicsPendulumPivot = Result144;
	Context.MapUpdate.Transient.PhysicsPendulumRestAxis = Result145;
	Context.MapUpdate.Transient.PhysicsGoalPendulumLength = Context.MapUpdate.Constants.Emitter.PendulumSetup.PendulumLength;
	Context.MapUpdate.Transient.PhysicsisPendulumRigid = Context.MapUpdate.PendulumSetup.RigidPendulum;
	float Constant235 = 1000;
	float Result146 = Constant235 * Context.MapUpdate.Constants.Emitter.PendulumSetup.SpringDrivenConstraintASC40TightnessASC41;
	float3 Result147 = Context.MapUpdate.Transient.PhysicsPendulumRestAxis * Result146;
	float3 Result148 = Context.MapUpdate.Transient.PhysicsForce + Result147;
	float3 Force_IfResult;
	if(Context.MapUpdate.PendulumSetup.EnableSpringDriver)
	{
	Force_IfResult = Result148;
	}
	else
	{
	Force_IfResult = Context.MapUpdate.Transient.PhysicsForce;
	}
	Context.MapUpdate.Transient.PhysicsForce = Force_IfResult;
}

float GetSpawnInterpolation()
{
	return HackSpawnInterp;
}


void InterpolateParameters(inout FSimulationContext Context)
{
	int InterpSpawn_Index = ExecIndex();
	float InterpSpawn_SpawnTime = Emitter_InterpSpawnStartDt + (Emitter_SpawnInterval * InterpSpawn_Index);
	float InterpSpawn_UpdateTime = Engine_DeltaTime - InterpSpawn_SpawnTime;
	float InterpSpawn_InvSpawnTime = 1.0 / InterpSpawn_SpawnTime;
	float InterpSpawn_InvUpdateTime = 1.0 / InterpSpawn_UpdateTime;
	float SpawnInterp = InterpSpawn_SpawnTime * Engine_InverseDeltaTime ;
	HackSpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.InterpSpawn_Index = InterpSpawn_Index;
	Context.MapSpawn.Interpolation.InterpSpawn_SpawnTime = InterpSpawn_SpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_UpdateTime = InterpSpawn_UpdateTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvSpawnTime = InterpSpawn_InvSpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvUpdateTime = InterpSpawn_InvUpdateTime;
	Context.MapSpawn.Interpolation.SpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.Emitter_SpawnInterval = Emitter_SpawnInterval;
	Context.MapSpawn.Interpolation.Emitter_InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapSpawn.Interpolation.Emitter_SpawnGroup = Emitter_SpawnGroup;
	Context.MapSpawn.Engine.Time = lerp(PREV_Engine_Time, Engine_Time, SpawnInterp);
	Context.MapSpawn.Engine.RealTime = lerp(PREV_Engine_RealTime, Engine_RealTime, SpawnInterp);
	Context.MapSpawn.Engine.Owner.TimeSinceRendered = lerp(PREV_Engine_Owner_TimeSinceRendered, Engine_Owner_TimeSinceRendered, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistance = lerp(PREV_Engine_Owner_LODDistance, Engine_Owner_LODDistance, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistanceFraction = lerp(PREV_Engine_Owner_LODDistanceFraction, Engine_Owner_LODDistanceFraction, SpawnInterp);
	Context.MapSpawn.Engine.System.Age = lerp(PREV_Engine_System_Age, Engine_System_Age, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Rotation = lerp(PREV_Engine_Owner_Rotation, Engine_Owner_Rotation, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Position = lerp(PREV_Engine_Owner_Position.xyz, Engine_Owner_Position.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Velocity = lerp(PREV_Engine_Owner_Velocity.xyz, Engine_Owner_Velocity.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemXAxis = lerp(PREV_Engine_Owner_SystemXAxis.xyz, Engine_Owner_SystemXAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemYAxis = lerp(PREV_Engine_Owner_SystemYAxis.xyz, Engine_Owner_SystemYAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemZAxis = lerp(PREV_Engine_Owner_SystemZAxis.xyz, Engine_Owner_SystemZAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Scale = lerp(PREV_Engine_Owner_Scale.xyz, Engine_Owner_Scale.xyz, SpawnInterp);
	Context.MapSpawn.Emitter.Age = lerp(PREV_Emitter_Age, Emitter_Age, SpawnInterp);
	Context.MapSpawn.Emitter.AlphaScale = lerp(PREV_Emitter_AlphaScale, Emitter_AlphaScale, SpawnInterp);
	Context.MapSpawn.Engine.DeltaTime = 0.0f;
	Context.MapSpawn.Engine.InverseDeltaTime = 0.0f;
	Context.MapUpdate.Engine.DeltaTime = InterpSpawn_UpdateTime;
	Context.MapUpdate.Engine.InverseDeltaTime = InterpSpawn_InvUpdateTime;
}

void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void SimulateMapSpawn(inout FSimulationContext Context)
{


	float Constant = 1;
	Context.MapSpawn.Particles.Lifetime = Constant;
	float4 Constant1 = float4(1,1,1,1);
	Context.MapSpawn.Particles.Color = Constant1;
	float Constant2 = 1;
	Context.MapSpawn.Particles.Mass = Constant2;
	float2 Constant3 = float2(10,10);
	Context.MapSpawn.Particles.SpriteSize = Constant3;
	float Constant4 = 0;
	Context.MapSpawn.Particles.SpriteRotation = Constant4;
	float3 Constant5 = float3(1,1,1);
	Context.MapSpawn.Particles.Scale = Constant5;
	float Constant6 = 0;
	Context.MapSpawn.Particles.MaterialRandom = Constant6;
	float4 Constant7 = float4(0,0,0,1);
	Context.MapSpawn.Particles.MeshOrientation = Constant7;
	float4 Constant8 = float4(0.0, 0.0, 0.0, 1.0);
	Context.MapSpawn.Particles.InitialRotation = Constant8;
	float3 Constant9 = float3(0,0,0);
	Context.MapSpawn.Particles.Velocity = Constant9;
	float Constant10 = 0;
	Context.MapSpawn.Particles.Age = Constant10;
	float Constant11 = (0.0);
	Context.MapSpawn.Particles.NormalizedAge = Constant11;
	float3 Constant12 = float3(0,0,0);
	Context.MapSpawn.Particles.RotationalVelocity = Constant12;

	bool Constant13 = false;
	Context.MapSpawn.UniformRangedFloat.OverrideRandomness = Constant13;
	int Constant14 = 0;
	Context.MapSpawn.UniformRangedFloat.RandomnessMode = Constant14;
	bool Constant15 = false;
	Context.MapSpawn.UniformRangedFloat.OverrideSeed = Constant15;
	bool Constant16 = false;
	Context.MapSpawn.UniformRangedFloat.FixedRandomSeed = Constant16;
	float UniformRangedFloat_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat_Emitter_Func_(UniformRangedFloat_Emitter_Func_Output_UniformRangedFloat, Context);
	Context.MapSpawn.VectorFromFloat.Value = UniformRangedFloat_Emitter_Func_Output_UniformRangedFloat;
	bool Constant31 = true;
	bool Constant32 = true;
	bool Constant33 = false;
	bool Constant34 = true;
	float3 VectorFromFloat_Emitter_Func_Output_Vec3;
	VectorFromFloat_Emitter_Func_(VectorFromFloat_Emitter_Func_Output_Vec3, Context);
	Context.MapSpawn.InitializeParticle.WriteMass = Constant31;
	Context.MapSpawn.InitializeParticle.WriteColor = Constant32;
	Context.MapSpawn.InitializeParticle.WriteSpriteSize = Constant33;
	Context.MapSpawn.InitializeParticle.WriteScale = Constant34;
	Context.MapSpawn.InitializeParticle.MeshScale = VectorFromFloat_Emitter_Func_Output_Vec3;
	bool Constant35 = true;
	Context.MapSpawn.InitializeParticle.WriteLifetime = Constant35;
	bool Constant36 = false;
	Context.MapSpawn.InitializeParticle.WriteSpriteRotation = Constant36;
	bool Constant37 = false;
	Context.MapSpawn.InitializeParticle.WritePosition = Constant37;
	bool Constant38 = true;
	float3 InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	InitializeParticle_SimulationPosition_Emitter_Func_(InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition, Context);
	Context.MapSpawn.InitializeParticle.Position = InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	Context.MapSpawn.Particles.Position = InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	bool Constant41 = true;
	Context.MapSpawn.InitializeParticle.WriteMaterialRandom = Constant41;
	float Constant42 = 0;
	float Constant43 = 1;
	int Constant44 = -1;
	int Constant45 = 0;
	bool Constant46 = false;
	float RandomRangeFloat_Func_Output_Result1;
	RandomRangeFloat_Func_(Constant42, Constant43, Constant44, Constant45, Constant46, RandomRangeFloat_Func_Output_Result1, Context);
	Context.MapSpawn.InitializeParticle.MaterialRandom = RandomRangeFloat_Func_Output_Result1;
	EnterStatScope(1 );
	InitializeParticle_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant52 = false;
	Context.MapSpawn.SphereLocation.OverrideRandomness = Constant52;
	int Constant53 = 0;
	Context.MapSpawn.SphereLocation.RandomnessMode = Constant53;
	bool Constant54 = false;
	Context.MapSpawn.SphereLocation.OverrideSeed = Constant54;
	int Constant55 = 0;
	Context.MapSpawn.SphereLocation.SurfaceExpansionMode = Constant55;
	bool Constant56 = true;
	Context.MapSpawn.SphereLocation.NormalizeThickness = Constant56;
	bool Constant57 = false;
	Context.MapSpawn.SphereLocation.FixedRandomSeed = Constant57;
	float3 Constant58 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Local.SphereLocation.SphereVector = Constant58;
	bool Constant59 = false;
	Context.MapSpawn.SphereLocation.HemisphereX = Constant59;
	bool Constant60 = false;
	Context.MapSpawn.SphereLocation.HemisphereY = Constant60;
	bool Constant61 = false;
	Context.MapSpawn.SphereLocation.HemisphereZ = Constant61;
	Context.MapSpawn.SphereLocation.SphereOrigin = Context.MapSpawn.Particles.Position;
	int Constant62 = 2;
	Context.MapSpawn.SphereLocation.CoordinateSpace = Constant62;
	EnterStatScope(2 );
	SphereLocation_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant86 = false;
	Context.MapSpawn.UniformRangedFloat003.OverrideRandomness = Constant86;
	int Constant87 = 0;
	Context.MapSpawn.UniformRangedFloat003.RandomnessMode = Constant87;
	bool Constant88 = false;
	Context.MapSpawn.UniformRangedFloat003.OverrideSeed = Constant88;
	bool Constant89 = false;
	Context.MapSpawn.UniformRangedFloat003.FixedRandomSeed = Constant89;
	float UniformRangedFloat003_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat003_Emitter_Func_(UniformRangedFloat003_Emitter_Func_Output_UniformRangedFloat, Context);
	bool Constant92 = false;
	Context.MapSpawn.UniformRangedFloat004.OverrideRandomness = Constant92;
	int Constant93 = 0;
	Context.MapSpawn.UniformRangedFloat004.RandomnessMode = Constant93;
	bool Constant94 = false;
	Context.MapSpawn.UniformRangedFloat004.OverrideSeed = Constant94;
	bool Constant95 = false;
	Context.MapSpawn.UniformRangedFloat004.FixedRandomSeed = Constant95;
	float UniformRangedFloat004_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat004_Emitter_Func_(UniformRangedFloat004_Emitter_Func_Output_UniformRangedFloat, Context);
	bool Constant98 = false;
	Context.MapSpawn.UniformRangedFloat005.OverrideRandomness = Constant98;
	int Constant99 = 0;
	Context.MapSpawn.UniformRangedFloat005.RandomnessMode = Constant99;
	bool Constant100 = false;
	Context.MapSpawn.UniformRangedFloat005.OverrideSeed = Constant100;
	bool Constant101 = false;
	Context.MapSpawn.UniformRangedFloat005.FixedRandomSeed = Constant101;
	float UniformRangedFloat005_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat005_Emitter_Func_(UniformRangedFloat005_Emitter_Func_Output_UniformRangedFloat, Context);
	Context.MapSpawn.BreakVector.X = UniformRangedFloat003_Emitter_Func_Output_UniformRangedFloat;
	Context.MapSpawn.BreakVector.Y = UniformRangedFloat004_Emitter_Func_Output_UniformRangedFloat;
	Context.MapSpawn.BreakVector.Z = UniformRangedFloat005_Emitter_Func_Output_UniformRangedFloat;
	float3 BreakVector_Emitter_Func_Output_Vec3;
	BreakVector_Emitter_Func_(BreakVector_Emitter_Func_Output_Vec3, Context);
	Context.MapSpawn.InitialMeshOrientation.Rotation = BreakVector_Emitter_Func_Output_Vec3;
	int Constant104 = 0;
	Context.MapSpawn.InitialMeshOrientation.OrientationCoordinateSpace = Constant104;
	EnterStatScope(3 );
	InitialMeshOrientation_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant119 = false;
	Context.MapSpawn.UniformRangedFloat001.OverrideRandomness = Constant119;
	int Constant120 = 0;
	Context.MapSpawn.UniformRangedFloat001.RandomnessMode = Constant120;
	bool Constant121 = false;
	Context.MapSpawn.UniformRangedFloat001.OverrideSeed = Constant121;
	bool Constant122 = false;
	Context.MapSpawn.UniformRangedFloat001.FixedRandomSeed = Constant122;
	float UniformRangedFloat001_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat001_Emitter_Func_(UniformRangedFloat001_Emitter_Func_Output_UniformRangedFloat, Context);
	Context.MapSpawn.AddVelocityFromPoint.VelocityStrength = UniformRangedFloat001_Emitter_Func_Output_UniformRangedFloat;
	int Constant125 = 2;
	Context.MapSpawn.AddVelocityFromPoint.OriginOffsetCoordinateSpace = Constant125;
	float3 AddVelocityFromPoint_SimulationPosition_Emitter_Func_Output_OutPosition;
	AddVelocityFromPoint_SimulationPosition_Emitter_Func_(AddVelocityFromPoint_SimulationPosition_Emitter_Func_Output_OutPosition, Context);
	Context.MapSpawn.AddVelocityFromPoint.VelocityOrigin = AddVelocityFromPoint_SimulationPosition_Emitter_Func_Output_OutPosition;
	Context.MapSpawn.AddVelocityFromPoint.DefaultPosition = Context.MapSpawn.Particles.Position;
	bool Constant128 = true;
	Context.MapSpawn.AddVelocityFromPoint.InvertVelocityFalloff = Constant128;
	bool Constant129 = false;
	Context.MapSpawn.AddVelocityFromPoint.UseFalloffDistance = Constant129;
	EnterStatScope(4 );
	AddVelocityFromPoint_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant152 = false;
	Context.MapSpawn.UniformRangedLinearColor.OverrideRandomness = Constant152;
	int Constant153 = 0;
	Context.MapSpawn.UniformRangedLinearColor.RandomnessMode = Constant153;
	bool Constant154 = false;
	Context.MapSpawn.UniformRangedLinearColor.OverrideSeed = Constant154;
	bool Constant155 = false;
	Context.MapSpawn.UniformRangedLinearColor.FixedRandomSeed = Constant155;
	float4 UniformRangedLinearColor_Emitter_Func_Output_UniformRangedLinearColor;
	UniformRangedLinearColor_Emitter_Func_(UniformRangedLinearColor_Emitter_Func_Output_UniformRangedLinearColor, Context);
	Context.MapSpawn.Color.Color = UniformRangedLinearColor_Emitter_Func_Output_UniformRangedLinearColor;
	EnterStatScope(5 );
	Color_Emitter_Func_(Context);
	ExitStatScope( );




	Context.MapSpawn.Particles.PreviousVelocity = Context.MapSpawn.Particles.Velocity;
	Context.MapSpawn.Particles.RotationalInertia = Context.MapSpawn.Particles.Mass;
	Context.MapSpawn.Particles.Initial.Color = Context.MapSpawn.Particles.Color;

	Context.MapSpawn.Particles.Initial.Scale = Context.MapSpawn.Particles.Scale;

	Context.MapSpawn.Particles.Initial.Velocity = Context.MapSpawn.Particles.Velocity;




}
void SimulateMapUpdate(inout FSimulationContext Context)
{

	bool Constant160 = true;
	Context.MapUpdate.DataInstance.Alive = Constant160;
	Context.MapUpdate.ParticleState.DeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.ParticleState.Lifetime = Context.MapUpdate.Particles.Lifetime;
	EnterStatScope(6 );
	ParticleState_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.FloatFromCurve001.CurveIndex = Context.MapUpdate.Particles.NormalizedAge;
	float FloatFromCurve001_Emitter_Func_Output_Value;
	FloatFromCurve001_Emitter_Func_(FloatFromCurve001_Emitter_Func_Output_Value, Context);
	Context.MapUpdate.ScaleColor.ScaleAlpha = FloatFromCurve001_Emitter_Func_Output_Value;
	Context.MapUpdate.ScaleColor.ColorValueToScale = Context.MapUpdate.Particles.Initial.Color;
	float4 Constant164 = float4(1,1,1,1);
	Context.MapUpdate.Transient.ParticleColorScaleFactor = Constant164;
	EnterStatScope(7 );
	ScaleColor_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.FloatFromCurve.CurveIndex = Context.MapUpdate.Particles.NormalizedAge;
	float FloatFromCurve_Emitter_Func_Output_Value;
	FloatFromCurve_Emitter_Func_(FloatFromCurve_Emitter_Func_Output_Value, Context);
	Context.MapUpdate.VectorFromFloat001.Value = FloatFromCurve_Emitter_Func_Output_Value;
	float3 VectorFromFloat001_Emitter_Func_Output_Vec3;
	VectorFromFloat001_Emitter_Func_(VectorFromFloat001_Emitter_Func_Output_Vec3, Context);
	Context.MapUpdate.ScaleMeshSize.ScaleFactor = VectorFromFloat001_Emitter_Func_Output_Vec3;
	Context.MapUpdate.ScaleMeshSize.InitialMeshScale = Context.MapUpdate.Particles.Initial.Scale;
	float3 Constant165 = float3(1,1,1);
	Context.MapUpdate.Transient.MeshScaleFactor = Constant165;
	EnterStatScope(8 );
	ScaleMeshSize_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.FloatFromCurve002.CurveIndex = Context.MapUpdate.Particles.NormalizedAge;
	float FloatFromCurve002_Emitter_Func_Output_Value;
	FloatFromCurve002_Emitter_Func_(FloatFromCurve002_Emitter_Func_Output_Value, Context);
	Context.MapUpdate.VectorFromFloat002.Value = FloatFromCurve002_Emitter_Func_Output_Value;
	float3 VectorFromFloat002_Emitter_Func_Output_Vec3;
	VectorFromFloat002_Emitter_Func_(VectorFromFloat002_Emitter_Func_Output_Vec3, Context);
	Context.MapUpdate.ScaleVelocity.VelocityScale = VectorFromFloat002_Emitter_Func_Output_Vec3;
	int Constant166 = 2;
	Context.MapUpdate.ScaleVelocity.CoordinateSpace = Constant166;
	bool Constant167 = true;
	EnterStatScope(9 );
	ScaleVelocity_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.Transient.PhysicsDeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.Transient.PhysicsDeltaTime;
	float Constant171 = (0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Constant171;
	float3 Constant172 = float3(0,0,0);
	Context.MapUpdate.Transient.PhysicsForce = Constant172;
	Context.MapUpdate.SolveForcesAndVelocity.Force = Context.MapUpdate.Transient.PhysicsForce;
	Context.MapUpdate.SolveForcesAndVelocity.Velocity = Context.MapUpdate.Particles.Velocity;
	Context.MapUpdate.SolveForcesAndVelocity.Mass = Context.MapUpdate.Particles.Mass;
	float3 Constant173 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Constant173;
	float3 Constant174 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Constant174;
	float Constant175 = (0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Constant175;
	float Constant176 = 0;
	Context.MapUpdate.Transient.PhysicsDrag = Constant176;
	Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity = Context.MapUpdate.Particles.PreviousVelocity;
	Context.MapUpdate.SolveForcesAndVelocity.Position = Context.MapUpdate.Particles.Position;
	float3 Constant177 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Constant177;
	bool Constant178 = true;
	Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties = Constant178;
	EnterStatScope(10 );
	SolveForcesAndVelocity_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant184 = false;
	Context.MapUpdate.UniformRangedFloat006.OverrideRandomness = Constant184;
	int Constant185 = 0;
	Context.MapUpdate.UniformRangedFloat006.RandomnessMode = Constant185;
	bool Constant186 = false;
	Context.MapUpdate.UniformRangedFloat006.OverrideSeed = Constant186;
	bool Constant187 = false;
	Context.MapUpdate.UniformRangedFloat006.FixedRandomSeed = Constant187;
	float UniformRangedFloat006_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat006_Emitter_Func_(UniformRangedFloat006_Emitter_Func_Output_UniformRangedFloat, Context);
	bool Constant190 = false;
	Context.MapUpdate.UniformRangedFloat007.OverrideRandomness = Constant190;
	int Constant191 = 0;
	Context.MapUpdate.UniformRangedFloat007.RandomnessMode = Constant191;
	bool Constant192 = false;
	Context.MapUpdate.UniformRangedFloat007.OverrideSeed = Constant192;
	bool Constant193 = false;
	Context.MapUpdate.UniformRangedFloat007.FixedRandomSeed = Constant193;
	float UniformRangedFloat007_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat007_Emitter_Func_(UniformRangedFloat007_Emitter_Func_Output_UniformRangedFloat, Context);
	bool Constant196 = false;
	Context.MapUpdate.UniformRangedFloat008.OverrideRandomness = Constant196;
	int Constant197 = 0;
	Context.MapUpdate.UniformRangedFloat008.RandomnessMode = Constant197;
	bool Constant198 = false;
	Context.MapUpdate.UniformRangedFloat008.OverrideSeed = Constant198;
	bool Constant199 = false;
	Context.MapUpdate.UniformRangedFloat008.FixedRandomSeed = Constant199;
	float UniformRangedFloat008_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat008_Emitter_Func_(UniformRangedFloat008_Emitter_Func_Output_UniformRangedFloat, Context);
	Context.MapUpdate.BreakVector001.X = UniformRangedFloat006_Emitter_Func_Output_UniformRangedFloat;
	Context.MapUpdate.BreakVector001.Y = UniformRangedFloat007_Emitter_Func_Output_UniformRangedFloat;
	Context.MapUpdate.BreakVector001.Z = UniformRangedFloat008_Emitter_Func_Output_UniformRangedFloat;
	float3 BreakVector001_Emitter_Func_Output_Vec3;
	BreakVector001_Emitter_Func_(BreakVector001_Emitter_Func_Output_Vec3, Context);
	Context.MapUpdate.MeshRotationForce.Rotation = BreakVector001_Emitter_Func_Output_Vec3;
	float3 Constant202 = float3(0,0,0);
	Context.MapUpdate.Transient.PhysicsRotationalForce = Constant202;
	EnterStatScope(11 );
	MeshRotationForce_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.SolveRotationalForcesAndVelocity.DeltaTime = Context.MapUpdate.Transient.PhysicsDeltaTime;
	float Constant208 = (0.0);
	Context.MapUpdate.Local.SolveRotationalForcesAndVelocity.DeltaTime = Constant208;
	Context.MapUpdate.SolveRotationalForcesAndVelocity.RotationalInertia = Context.MapUpdate.Particles.RotationalInertia;
	float3 Constant209 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.SolveRotationalForcesAndVelocity.ForceRotationsInRadians = Constant209;
	Context.MapUpdate.SolveRotationalForcesAndVelocity.RotationalVelocity = Context.MapUpdate.Particles.RotationalVelocity;
	float3 Constant210 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.SolveRotationalForcesAndVelocity.RotationalVelocity = Constant210;
	float Constant211 = 0;
	Context.MapUpdate.Transient.PhysicsRotationalDrag = Constant211;
	Context.MapUpdate.SolveRotationalForcesAndVelocity.MeshOrientation = Context.MapUpdate.Particles.MeshOrientation;
	float4 Constant212 = float4(0.0, 0.0, 0.0, 1.0);
	Context.MapUpdate.OUTPUT_VAR.SolveRotationalForcesAndVelocity.MeshOrientation = Constant212;
	bool Constant213 = true;
	Context.MapUpdate.SolveRotationalForcesAndVelocity.WritetoIntrinsicProperties = Constant213;
	EnterStatScope(12 );
	SolveRotationalForcesAndVelocity_Emitter_Func_(Context);
	ExitStatScope( );
	int Constant226 = 1;
	Context.MapUpdate.PendulumSetup.PendulumPivotOffsetCoordinateSpace = Constant226;
	float3 PendulumSetup_NF_InitialParticlePosition_Emitter_Func_Output_OutPosition;
	PendulumSetup_NF_InitialParticlePosition_Emitter_Func_(PendulumSetup_NF_InitialParticlePosition_Emitter_Func_Output_OutPosition, Context);
	Context.MapUpdate.PendulumSetup.PendulumPivot = PendulumSetup_NF_InitialParticlePosition_Emitter_Func_Output_OutPosition;
	bool Constant229 = true;
	Context.MapUpdate.PendulumSetup.RigidPendulum = Constant229;
	float3 Constant230 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Transient.PhysicsPendulumRestAxis = Constant230;
	bool Constant231 = false;
	Context.MapUpdate.PendulumSetup.EnableSpringDriver = Constant231;
	EnterStatScope(13 );
	PendulumSetup_Emitter_Func_(Context);
	ExitStatScope( );



}
void SimulateMain()
{
EnterStatScope(14 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.MapSpawn.Particles.Age = 0.0f;
	Context.MapSpawn.Particles.Color.r = 0.0f;
	Context.MapSpawn.Particles.Color.g = 0.0f;
	Context.MapSpawn.Particles.Color.b = 0.0f;
	Context.MapSpawn.Particles.Color.a = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.r = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.g = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.b = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.a = 0.0f;
	Context.MapSpawn.Particles.Initial.Scale.x = 0.0f;
	Context.MapSpawn.Particles.Initial.Scale.y = 0.0f;
	Context.MapSpawn.Particles.Initial.Scale.z = 0.0f;
	Context.MapSpawn.Particles.Initial.Velocity.x = 0.0f;
	Context.MapSpawn.Particles.Initial.Velocity.y = 0.0f;
	Context.MapSpawn.Particles.Initial.Velocity.z = 0.0f;
	Context.MapSpawn.Particles.InitialRotation.x = 0.0f;
	Context.MapSpawn.Particles.InitialRotation.y = 0.0f;
	Context.MapSpawn.Particles.InitialRotation.z = 0.0f;
	Context.MapSpawn.Particles.InitialRotation.w = 0.0f;
	Context.MapSpawn.Particles.Lifetime = 0.0f;
	Context.MapSpawn.Particles.Mass = 0.0f;
	Context.MapSpawn.Particles.MaterialRandom = 0.0f;
	Context.MapSpawn.Particles.MeshOrientation.x = 0.0f;
	Context.MapSpawn.Particles.MeshOrientation.y = 0.0f;
	Context.MapSpawn.Particles.MeshOrientation.z = 0.0f;
	Context.MapSpawn.Particles.MeshOrientation.w = 0.0f;
	Context.MapSpawn.Particles.NormalizedAge = 0.0f;
	Context.MapSpawn.Particles.Position.x = 0.0f;
	Context.MapSpawn.Particles.Position.y = 0.0f;
	Context.MapSpawn.Particles.Position.z = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.x = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.y = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.z = 0.0f;
	Context.MapSpawn.Particles.RotationalInertia = 0.0f;
	Context.MapSpawn.Particles.RotationalVelocity.x = 0.0f;
	Context.MapSpawn.Particles.RotationalVelocity.y = 0.0f;
	Context.MapSpawn.Particles.RotationalVelocity.z = 0.0f;
	Context.MapSpawn.Particles.Scale.x = 0.0f;
	Context.MapSpawn.Particles.Scale.y = 0.0f;
	Context.MapSpawn.Particles.Scale.z = 0.0f;
	Context.MapSpawn.Particles.SpriteRotation = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.x = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.y = 0.0f;
	Context.MapSpawn.Particles.UniqueID = 0;
	Context.MapSpawn.Particles.Velocity.x = 0.0f;
	Context.MapSpawn.Particles.Velocity.y = 0.0f;
	Context.MapSpawn.Particles.Velocity.z = 0.0f;
	Context.MapSpawn.Particles.UniqueID = Engine_Emitter_TotalSpawnedParticles + ExecIndex();
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat.Minimum = Constants_Emitter_UniformRangedFloat_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat.Maximum = Constants_Emitter_UniformRangedFloat_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat.RandomSeed = Constants_Emitter_UniformRangedFloat_RandomSeed;
	Context.MapSpawn.Emitter.RandomSeed = Emitter_RandomSeed;
	Context.MapSpawn.Engine.System.TickCount = Engine_System_TickCount;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Lifetime = Constants_Emitter_InitializeParticle_Lifetime;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Color = Constants_Emitter_InitializeParticle_Color;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Mass = Constants_Emitter_InitializeParticle_Mass;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteSize = Constants_Emitter_InitializeParticle_SpriteSize;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteRotation = Constants_Emitter_InitializeParticle_SpriteRotation;
	Context.MapSpawn.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.MapSpawn.Constants.Emitter.SphereLocation.RandomSeed = Constants_Emitter_SphereLocation_RandomSeed;
	Context.MapSpawn.Constants.Emitter.SphereLocation.SurfaceOnlyBandThickness = Constants_Emitter_SphereLocation_SurfaceOnlyBandThickness;
	Context.MapSpawn.Constants.Emitter.SphereLocation.SphereRadius = Constants_Emitter_SphereLocation_SphereRadius;
	Context.MapSpawn.Constants.Emitter.SphereLocation.NonUniformScale = Constants_Emitter_SphereLocation_NonUniformScale;
	Context.MapSpawn.Constants.Emitter.SphereLocation.Offset = Constants_Emitter_SphereLocation_Offset;
	Context.MapSpawn.Constants.Emitter.SphereLocation.SpawnGroupMask = Constants_Emitter_SphereLocation_SpawnGroupMask;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat003.Minimum = Constants_Emitter_UniformRangedFloat003_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat003.Maximum = Constants_Emitter_UniformRangedFloat003_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat003.RandomSeed = Constants_Emitter_UniformRangedFloat003_RandomSeed;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.Minimum = Constants_Emitter_UniformRangedFloat004_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.Maximum = Constants_Emitter_UniformRangedFloat004_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.RandomSeed = Constants_Emitter_UniformRangedFloat004_RandomSeed;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.Minimum = Constants_Emitter_UniformRangedFloat005_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.Maximum = Constants_Emitter_UniformRangedFloat005_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.RandomSeed = Constants_Emitter_UniformRangedFloat005_RandomSeed;
	Context.MapSpawn.Constants.Emitter.InitialMeshOrientation.OrientationVector = Constants_Emitter_InitialMeshOrientation_OrientationVector;
	Context.MapSpawn.Constants.Emitter.InitialMeshOrientation.OrientationAxis = Constants_Emitter_InitialMeshOrientation_OrientationAxis;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat001.Minimum = Constants_Emitter_UniformRangedFloat001_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat001.Maximum = Constants_Emitter_UniformRangedFloat001_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat001.RandomSeed = Constants_Emitter_UniformRangedFloat001_RandomSeed;
	Context.MapSpawn.Constants.Emitter.AddVelocityFromPoint.OriginOffset = Constants_Emitter_AddVelocityFromPoint_OriginOffset;
	Context.MapSpawn.Constants.Emitter.AddVelocityFromPoint.VelocityFalloffDistance = Constants_Emitter_AddVelocityFromPoint_VelocityFalloffDistance;
	Context.MapSpawn.Constants.Emitter.UniformRangedLinearColor.Minimum = Constants_Emitter_UniformRangedLinearColor_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedLinearColor.Maximum = Constants_Emitter_UniformRangedLinearColor_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedLinearColor.RandomSeed = Constants_Emitter_UniformRangedLinearColor_RandomSeed;
	Context.MapSpawn.Constants.Emitter.Color.ScaleColor = Constants_Emitter_Color_ScaleColor;
	Context.MapSpawn.Constants.Emitter.Color.ScaleAlpha = Constants_Emitter_Color_ScaleAlpha;
	Context.MapSpawn.Emitter.AlphaScale = Emitter_AlphaScale;
	Context.MapUpdate.Engine.DeltaTime = Engine_DeltaTime;
	Context.MapUpdate.Constants.Emitter.FloatFromCurve001.ScaleCurve = Constants_Emitter_FloatFromCurve001_ScaleCurve;
	Context.MapUpdate.Constants.Emitter.ScaleColor.ScaleRGB = Constants_Emitter_ScaleColor_ScaleRGB;
	Context.MapUpdate.Constants.Emitter.FloatFromCurve.ScaleCurve = Constants_Emitter_FloatFromCurve_ScaleCurve;
	Context.MapUpdate.Constants.Emitter.FloatFromCurve002.ScaleCurve = Constants_Emitter_FloatFromCurve002_ScaleCurve;
	Context.MapUpdate.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.MapUpdate.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.MapUpdate.Constants.Emitter.SolveForcesAndVelocity.SpeedLimit = Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	Context.MapUpdate.Constants.Emitter.SolveForcesAndVelocity.AccelerationLimit = Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	Context.MapUpdate.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.MapUpdate.Constants.Emitter.UniformRangedFloat006.Minimum = Constants_Emitter_UniformRangedFloat006_Minimum;
	Context.MapUpdate.Constants.Emitter.UniformRangedFloat006.Maximum = Constants_Emitter_UniformRangedFloat006_Maximum;
	Context.MapUpdate.Constants.Emitter.UniformRangedFloat006.RandomSeed = Constants_Emitter_UniformRangedFloat006_RandomSeed;
	Context.MapUpdate.Constants.Emitter.UniformRangedFloat007.Minimum = Constants_Emitter_UniformRangedFloat007_Minimum;
	Context.MapUpdate.Constants.Emitter.UniformRangedFloat007.Maximum = Constants_Emitter_UniformRangedFloat007_Maximum;
	Context.MapUpdate.Constants.Emitter.UniformRangedFloat007.RandomSeed = Constants_Emitter_UniformRangedFloat007_RandomSeed;
	Context.MapUpdate.Constants.Emitter.UniformRangedFloat008.Minimum = Constants_Emitter_UniformRangedFloat008_Minimum;
	Context.MapUpdate.Constants.Emitter.UniformRangedFloat008.Maximum = Constants_Emitter_UniformRangedFloat008_Maximum;
	Context.MapUpdate.Constants.Emitter.UniformRangedFloat008.RandomSeed = Constants_Emitter_UniformRangedFloat008_RandomSeed;
	Context.MapUpdate.Constants.Emitter.MeshRotationForce.LeverRadiusASC40cmASC41 = Constants_Emitter_MeshRotationForce_LeverRadiusASC40cmASC41;
	Context.MapUpdate.Constants.Emitter.PendulumSetup.PendulumPivotOffset = Constants_Emitter_PendulumSetup_PendulumPivotOffset;
	Context.MapUpdate.Constants.Emitter.PendulumSetup.PendulumRestAxis = Constants_Emitter_PendulumSetup_PendulumRestAxis;
	Context.MapUpdate.Constants.Emitter.PendulumSetup.PendulumLength = Constants_Emitter_PendulumSetup_PendulumLength;
	Context.MapUpdate.Constants.Emitter.PendulumSetup.SpringDrivenConstraintASC40TightnessASC41 = Constants_Emitter_PendulumSetup_SpringDrivenConstraintASC40TightnessASC41;
	Context.MapUpdate.Engine.Time = Engine_Time;
	Context.MapUpdate.Engine.InverseDeltaTime = Engine_InverseDeltaTime;
	Context.MapUpdate.Engine.ExecutionCount = Engine_ExecutionCount;
	Context.MapUpdate.Emitter.SpawnRate = Emitter_SpawnRate;
	Context.MapUpdate.Emitter.SpawnInterval = Emitter_SpawnInterval;
	Context.MapUpdate.Emitter.InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapUpdate.Emitter.SpawnGroup = Emitter_SpawnGroup;
	Context.MapUpdate.Engine.Emitter.TotalSpawnedParticles = Engine_Emitter_TotalSpawnedParticles;
	Context.MapUpdate.Emitter.RandomSeed = Emitter_RandomSeed;
	ReadDataSets(Context);
	InterpolateParameters(Context);
	SimulateMapSpawn(Context);

	Context.MapUpdate.Particles = Context.MapSpawn.Particles;


	SimulateMapUpdate(Context);
	WriteDataSets(Context);
	{
	bool bValid = Context.MapUpdate.DataInstance.Alive;
	int TmpWriteIndex = OutputIndex(0, true, bValid);
	OutputDataFloat(0, 0, TmpWriteIndex, Context.MapUpdate.Particles.Age);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.MapUpdate.Particles.Color.r);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.MapUpdate.Particles.Color.g);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.MapUpdate.Particles.Color.b);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.MapUpdate.Particles.Color.a);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.r);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.g);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.b);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.a);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Scale.x);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Scale.y);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Scale.z);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Velocity.x);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Velocity.y);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Velocity.z);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.MapUpdate.Particles.InitialRotation.x);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.MapUpdate.Particles.InitialRotation.y);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.MapUpdate.Particles.InitialRotation.z);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.MapUpdate.Particles.InitialRotation.w);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.MapUpdate.Particles.Lifetime);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.MapUpdate.Particles.Mass);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.MapUpdate.Particles.MaterialRandom);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.MapUpdate.Particles.MeshOrientation.x);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.MapUpdate.Particles.MeshOrientation.y);
	OutputDataFloat(0, 24, TmpWriteIndex, Context.MapUpdate.Particles.MeshOrientation.z);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.MapUpdate.Particles.MeshOrientation.w);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.MapUpdate.Particles.NormalizedAge);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.MapUpdate.Particles.Position.x);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.MapUpdate.Particles.Position.y);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.MapUpdate.Particles.Position.z);
	OutputDataFloat(0, 30, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.x);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.y);
	OutputDataFloat(0, 32, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.z);
	OutputDataFloat(0, 33, TmpWriteIndex, Context.MapUpdate.Particles.RotationalInertia);
	OutputDataFloat(0, 34, TmpWriteIndex, Context.MapUpdate.Particles.RotationalVelocity.x);
	OutputDataFloat(0, 35, TmpWriteIndex, Context.MapUpdate.Particles.RotationalVelocity.y);
	OutputDataFloat(0, 36, TmpWriteIndex, Context.MapUpdate.Particles.RotationalVelocity.z);
	OutputDataFloat(0, 37, TmpWriteIndex, Context.MapUpdate.Particles.Scale.x);
	OutputDataFloat(0, 38, TmpWriteIndex, Context.MapUpdate.Particles.Scale.y);
	OutputDataFloat(0, 39, TmpWriteIndex, Context.MapUpdate.Particles.Scale.z);
	OutputDataFloat(0, 40, TmpWriteIndex, Context.MapUpdate.Particles.SpriteRotation);
	OutputDataFloat(0, 41, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.x);
	OutputDataFloat(0, 42, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.y);
	OutputDataInt(0, 43, TmpWriteIndex, Context.MapUpdate.Particles.UniqueID);
	OutputDataFloat(0, 44, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.x);
	OutputDataFloat(0, 45, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.y);
	OutputDataFloat(0, 46, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.z);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
