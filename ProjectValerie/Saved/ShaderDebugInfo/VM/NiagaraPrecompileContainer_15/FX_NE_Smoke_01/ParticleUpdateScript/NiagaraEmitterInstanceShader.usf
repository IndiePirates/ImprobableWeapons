#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
	float Engine_Owner_TimeSinceRendered;
	float Engine_Owner_LODDistance;
	float Engine_Owner_LODDistanceFraction;
	float Engine_System_Age;
	int Engine_Owner_ExecutionState;
	int Engine_System_TickCount;
	int Engine_System_NumEmitters;
	int Engine_System_NumEmittersAlive;
}

cbuffer FNiagaraOwnerParameters
{
	float4x4 Engine_Owner_SystemLocalToWorld;
	float4x4 Engine_Owner_SystemWorldToLocal;
	float4x4 Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 Engine_Owner_SystemWorldToLocalNoScale;
	float4 Engine_Owner_Rotation;
	float4 Engine_Owner_Position;
	float4 Engine_Owner_Velocity;
	float4 Engine_Owner_SystemXAxis;
	float4 Engine_Owner_SystemYAxis;
	float4 Engine_Owner_SystemZAxis;
	float4 Engine_Owner_Scale;
}

cbuffer FNiagaraEmitterParameters
{
	int Engine_Emitter_NumParticles;
	int Engine_Emitter_TotalSpawnedParticles;
	float Engine_Emitter_SpawnCountScale;
	float Emitter_Age;
	int Emitter_RandomSeed;
	int Engine_Emitter_PaddingInt32_0;
	int Engine_Emitter_PaddingInt32_1;
	int Engine_Emitter_PaddingInt32_2;
}

cbuffer FNiagaraExternalParameters
{
	float3 Constants_Emitter_PendulumSetup_PendulumPivotOffset;
	float3 Constants_Emitter_PendulumSetup_PendulumRestAxis;
	float Constants_Emitter_PendulumSetup_PendulumLength;
	float Constants_Emitter_PendulumSetup_SpringDrivenConstraintASC40TightnessASC41;
	float Constants_Emitter_FloatFromCurve001_ScaleCurve;
	float3 Constants_Emitter_ScaleColor_ScaleRGB;
	float Constants_Emitter_FloatFromCurve_ScaleCurve;
	float Constants_Emitter_FloatFromCurve002_ScaleCurve;
	float Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	float Constants_Emitter_UniformRangedFloat006_Minimum;
	float Constants_Emitter_UniformRangedFloat006_Maximum;
	int Constants_Emitter_UniformRangedFloat006_RandomSeed;
	float Constants_Emitter_UniformRangedFloat007_Minimum;
	float Constants_Emitter_UniformRangedFloat007_Maximum;
	int Constants_Emitter_UniformRangedFloat007_RandomSeed;
	float Constants_Emitter_UniformRangedFloat008_Minimum;
	float Constants_Emitter_UniformRangedFloat008_Maximum;
	int Constants_Emitter_UniformRangedFloat008_RandomSeed;
	float Constants_Emitter_MeshRotationForce_LeverRadiusASC40cmASC41;
}

struct FParamMap0_VectorFromFloat002
{
	float Value;
};

struct FParamMap0_VectorFromFloat001
{
	float Value;
};

struct FParamMap0_UniformRangedFloat008
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat007
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat006
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_Transient
{
	float3 MeshScaleFactor;
	float4 ParticleColorScaleFactor;
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	float PhysicsGoalPendulumLength;
	bool PhysicsisPendulumRigid;
	float3 PhysicsPendulumPivot;
	float3 PhysicsPendulumRestAxis;
	float PhysicsRotationalDrag;
	float3 PhysicsRotationalForce;
};

struct FParamMap0_SolveRotationalForcesAndVelocity
{
	float DeltaTime;
	float4 MeshOrientation;
	float RotationalInertia;
	float3 RotationalVelocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ScaleVelocity
{
	int CoordinateSpace;
	float3 VelocityScale;
};

struct FParamMap0_ScaleMeshSize
{
	float3 InitialMeshScale;
	float3 ScaleFactor;
};

struct FParamMap0_ScaleColor
{
	float4 ColorValueToScale;
	float ScaleAlpha;
	float3 ScaleRGB;
};

struct FParamMap0_PendulumSetup
{
	bool EnableSpringDriver;
	float PendulumLength;
	float3 PendulumPivot;
	float3 PendulumPivotOffset;
	int PendulumPivotOffsetCoordinateSpace;
	float3 PendulumRestAxis;
	bool RigidPendulum;
	float SpringDrivenConstraintASC40TightnessASC41;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Particles_Initial
{
	float4 Color;
	float3 Scale;
	float3 Velocity;
};

struct FParamMap0_Particles
{
	float Age;
	float4 Color;
	FParamMap0_Particles_Initial Initial;
	float4 InitialRotation;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float4 MeshOrientation;
	float NormalizedAge;
	float3 Position;
	float3 PreviousVelocity;
	float RotationalInertia;
	float3 RotationalVelocity;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SolveRotationalForcesAndVelocity
{
	float IncomingPhysicsRotationalDrag;
	float3 IncomingPhysicsRotationalForce;
	float4 MeshOrientation;
	float3 RotationalVelocity;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_OUTPUT_VAR_SolveRotationalForcesAndVelocity SolveRotationalForcesAndVelocity;
};

struct FParamMap0_MeshRotationForce
{
	float LeverRadiusASC40cmASC41;
	float3 Rotation;
};

struct FParamMap0_Local_SolveRotationalForcesAndVelocity
{
	float DeltaTime;
	float3 ForceRotationsInRadians;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local
{
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Local_SolveRotationalForcesAndVelocity SolveRotationalForcesAndVelocity;
};

struct FParamMap0_FloatFromCurve002
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve001
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_Engine_System
{
	float Age;
	int NumEmitters;
	int NumEmittersAlive;
	int TickCount;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistance;
	float LODDistanceFraction;
	float3 Position;
	float4 Rotation;
	float3 Scale;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemLocalToWorldTransposed;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float4x4 SystemWorldToLocalTransposed;
	float3 SystemXAxis;
	float3 SystemYAxis;
	float3 SystemZAxis;
	float TimeSinceRendered;
	float3 Velocity;
};

struct FParamMap0_Engine_Emitter
{
	int NumParticles;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int PaddingInt32_2;
	float SpawnCountScale;
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_Emitter
{
	float Age;
	bool LocalSpace;
	int RandomSeed;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat008
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat007
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat006
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float SpeedLimit;
};

struct FParamMap0_Constants_Emitter_ScaleColor
{
	float3 ScaleRGB;
};

struct FParamMap0_Constants_Emitter_PendulumSetup
{
	float PendulumLength;
	float3 PendulumPivotOffset;
	float3 PendulumRestAxis;
	float SpringDrivenConstraintASC40TightnessASC41;
};

struct FParamMap0_Constants_Emitter_MeshRotationForce
{
	float LeverRadiusASC40cmASC41;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve002
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve001
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter
{
	FParamMap0_Constants_Emitter_FloatFromCurve FloatFromCurve;
	FParamMap0_Constants_Emitter_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_Constants_Emitter_FloatFromCurve002 FloatFromCurve002;
	FParamMap0_Constants_Emitter_MeshRotationForce MeshRotationForce;
	FParamMap0_Constants_Emitter_PendulumSetup PendulumSetup;
	FParamMap0_Constants_Emitter_ScaleColor ScaleColor;
	FParamMap0_Constants_Emitter_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Constants_Emitter_UniformRangedFloat006 UniformRangedFloat006;
	FParamMap0_Constants_Emitter_UniformRangedFloat007 UniformRangedFloat007;
	FParamMap0_Constants_Emitter_UniformRangedFloat008 UniformRangedFloat008;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Emitter Emitter;
};

struct FParamMap0_BreakVector001
{
	float X;
	float Y;
	float Z;
};

struct FParamMap0
{
	FParamMap0_BreakVector001 BreakVector001;
	FParamMap0_Constants Constants;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Emitter Emitter;
	FParamMap0_Engine Engine;
	FParamMap0_FloatFromCurve FloatFromCurve;
	FParamMap0_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_FloatFromCurve002 FloatFromCurve002;
	FParamMap0_Local Local;
	FParamMap0_MeshRotationForce MeshRotationForce;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_PendulumSetup PendulumSetup;
	FParamMap0_ScaleColor ScaleColor;
	FParamMap0_ScaleMeshSize ScaleMeshSize;
	FParamMap0_ScaleVelocity ScaleVelocity;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_SolveRotationalForcesAndVelocity SolveRotationalForcesAndVelocity;
	FParamMap0_Transient Transient;
	FParamMap0_UniformRangedFloat006 UniformRangedFloat006;
	FParamMap0_UniformRangedFloat007 UniformRangedFloat007;
	FParamMap0_UniformRangedFloat008 UniformRangedFloat008;
	FParamMap0_VectorFromFloat001 VectorFromFloat001;
	FParamMap0_VectorFromFloat002 VectorFromFloat002;
};

struct FSimulationContext
{
	FParamMap0 Map;
};

static float HackSpawnInterp = 1.0;
void PendulumSetup_NF_InitialParticlePosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context);
void PendulumSetup_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void PendulumSetup_Emitter_Func_(inout FSimulationContext Context);
void ParticleState_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterScaleAlphaFloatCurve001(float In_X, out float Out_Value);
void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void ScaleColor_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterValueScaleFactorFloatCurve(float In_X, out float Out_Value);
void FloatFromCurve_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void VectorFromFloat001_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context);
void ScaleMeshSize_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterValueVelocityScaleFloatCurve(float In_X, out float Out_Value);
void FloatFromCurve002_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void VectorFromFloat002_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context);
void ScaleVelocity_NF_TransformOffset_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void ScaleVelocity_Emitter_Func_(inout FSimulationContext Context);
void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context);
void GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float Out_Result, inout FSimulationContext Context);
void UniformRangedFloat006_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void UniformRangedFloat007_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void UniformRangedFloat008_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void BreakVector001_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context);
void MeshRotationForce_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void MeshRotationForce_Emitter_Func_(inout FSimulationContext Context);
void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context);
void AxisAngleToQuaternion_Func_(float4 In_AxisAngle, bool In_NormalizeAxis, out float4 Out_Quaternion, inout FSimulationContext Context);
void CustomHlsl001624D816540ECD5F976902A85E139007C_Func_(float4 In_Quat1, float4 In_Quat2, out float4 Out_Result);
void MultiplyQuaternion_Func_(float4 In_QuaternionA, float4 In_QuaternionB, out float4 Out_Quaternion, inout FSimulationContext Context);
void ApplyRotationVector_Particle_NormalizeRotations_false_Func_(float3 In_RotationalVelocityVector, float In_DeltaTime, float4 In_ExistingOrientationQuat, out float4 Out_NewOrientationQuat, inout FSimulationContext Context);
void SolveRotationalForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void PendulumSetup_NF_InitialParticlePosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant2 = true;
	float3 Constant3 = float3(0,0,0);
	float3 Vector_IfResult;
	if(Constant2)
	{
	Vector_IfResult = Constant3;
	}
	else
	{
	Vector_IfResult = Context.Map.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult;
}

void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context)
{
	int Constant11 = 0;
	bool Result = NiagaraAll(In_SourceSpace == Constant11);
	int Constant12 = 0;
	bool Result1 = NiagaraAll(In_DestinationSpace == Constant12);
	bool Result2 = Result && Result1;
	int Constant13 = 1;
	bool Result3 = NiagaraAll(In_SourceSpace == Constant13);
	int Constant14 = 1;
	bool Result4 = NiagaraAll(In_DestinationSpace == Constant14);
	bool Result5 = Result3 && Result4;
	bool Result6 = Result2 || Result5;
	int Constant15 = 2;
	bool Result7 = NiagaraAll(In_SourceSpace == Constant15);
	int Constant16 = 2;
	bool Result8 = NiagaraAll(In_DestinationSpace == Constant16);
	bool Result9 = Result7 && Result8;
	bool Result10 = Result6 || Result9;
	bool Result11 = Result && Result8;
	bool Result12 = Result7 && Result1;
	bool Result13 = Result11 || Result12;
	bool Result14 = In_bLocalSpace && Result13;
	bool Result15 = Result10 || Result14;
	bool Result16 = !In_bLocalSpace;
	bool Result17 = Result && Result4;
	bool Result18 = Result3 && Result1;
	bool Result19 = Result17 || Result18;
	bool Result20 = Result16 && Result19;
	bool Result21 = Result15 || Result20;
	bool Result22 = In_bLocalSpace && Result17;
	bool Result23 = Result7 && Result4;
	bool Result24 = Result22 || Result23;
	bool Result25 = Result16 && Result12;
	bool Result26 = Result24 || Result25;
	float4x4 Matrix_IfResult1;
	if(Result26)
	{
	Matrix_IfResult1 = In_LocalToWorldTransform;
	}
	else
	{
	Matrix_IfResult1 = In_WorldToLocalTransform;
	}
	Out_bUseOriginal = Result21;
	Out_OutTransform = Matrix_IfResult1;
}

void PendulumSetup_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant10 = true;
	float4x4 Matrix_IfResult;
	float4x4 Matrix001_IfResult;
	if(In_ApplyScale)
	{
	Matrix_IfResult = Context.Map.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult = Context.Map.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult = Context.Map.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult = Context.Map.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal;
	float4x4 TransformBase_Func_Output_OutTransform;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult, Matrix001_IfResult, Constant10, TransformBase_Func_Output_bUseOriginal, TransformBase_Func_Output_OutTransform, Context);
	float3 Result27 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform).xyz;
	float3 Vector_IfResult1;
	if(TransformBase_Func_Output_bUseOriginal)
	{
	Vector_IfResult1 = In_InVector;
	}
	else
	{
	Vector_IfResult1 = Result27;
	}
	Out_OutVector = Vector_IfResult1;
}

void PendulumSetup_Emitter_Func_(inout FSimulationContext Context)
{
	int Constant8 = 0;
	bool Constant9 = false;
	float3 PendulumSetup_TransformVector_Emitter_Func_Output_OutVector;
	PendulumSetup_TransformVector_Emitter_Func_(Context.Map.Constants.Emitter.PendulumSetup.PendulumPivotOffset, Context.Map.PendulumSetup.PendulumPivotOffsetCoordinateSpace, Constant8, Constant9, PendulumSetup_TransformVector_Emitter_Func_Output_OutVector, Context);
	float3 Result28 = PendulumSetup_TransformVector_Emitter_Func_Output_OutVector + Context.Map.PendulumSetup.PendulumPivot;
	float3 Result29 = normalize(Context.Map.Constants.Emitter.PendulumSetup.PendulumRestAxis);
	Context.Map.Transient.PhysicsPendulumPivot = Result28;
	Context.Map.Transient.PhysicsPendulumRestAxis = Result29;
	Context.Map.Transient.PhysicsGoalPendulumLength = Context.Map.Constants.Emitter.PendulumSetup.PendulumLength;
	Context.Map.Transient.PhysicsisPendulumRigid = Context.Map.PendulumSetup.RigidPendulum;
	float Constant17 = 1000;
	float Result30 = Constant17 * Context.Map.Constants.Emitter.PendulumSetup.SpringDrivenConstraintASC40TightnessASC41;
	float3 Result31 = Context.Map.Transient.PhysicsPendulumRestAxis * Result30;
	float3 Result32 = Context.Map.Transient.PhysicsForce + Result31;
	float3 Force_IfResult;
	if(Context.Map.PendulumSetup.EnableSpringDriver)
	{
	Force_IfResult = Result32;
	}
	else
	{
	Force_IfResult = Context.Map.Transient.PhysicsForce;
	}
	Context.Map.Transient.PhysicsForce = Force_IfResult;
}

void ParticleState_Emitter_Func_(inout FSimulationContext Context)
{
	bool Result33 = NiagaraAll(Context.Map.Particles.Age <= Context.Map.Engine.DeltaTime);
	Context.Map.OUTPUT_VAR.ParticleState.FirstFrame = Result33;
	float Result34 = Context.Map.Particles.Age + Context.Map.ParticleState.DeltaTime;
	float Constant19 = 1e-05;
	float Result35 = max(Context.Map.ParticleState.Lifetime, Constant19);
	float Constant20 = 0.0001;
	float Result36 = Result35 - Constant20;
	bool Result37 = NiagaraAll(Result34 < Result36);
	bool Constant21 = false;
	bool bool_IfResult;
	if(Result37)
	{
	bool_IfResult = Context.Map.DataInstance.Alive;
	}
	else
	{
	bool_IfResult = Constant21;
	}
	float Result38 = Result34 / Result35;
	Context.Map.DataInstance.Alive = bool_IfResult;
	Context.Map.Particles.Age = Result34;
	Context.Map.Particles.NormalizedAge = Result38;
}

void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterScaleAlphaFloatCurve001Output_Value;
	SampleCurve_EmitterScaleAlphaFloatCurve001(Context.Map.FloatFromCurve001.CurveIndex, SampleCurve_EmitterScaleAlphaFloatCurve001Output_Value);
	float Result39 = SampleCurve_EmitterScaleAlphaFloatCurve001Output_Value * Context.Map.Constants.Emitter.FloatFromCurve001.ScaleCurve;
	Out_Value = Result39;
}

void ScaleColor_Emitter_Func_(inout FSimulationContext Context)
{
	float4 Output0;
	Output0.r = Context.Map.Constants.Emitter.ScaleColor.ScaleRGB.x;
	Output0.g = Context.Map.Constants.Emitter.ScaleColor.ScaleRGB.y;
	Output0.b = Context.Map.Constants.Emitter.ScaleColor.ScaleRGB.z;
	Output0.a = Context.Map.ScaleColor.ScaleAlpha;
	float4 Result40 = Context.Map.Transient.ParticleColorScaleFactor * Output0;
	float4 Result41 = Context.Map.ScaleColor.ColorValueToScale * Result40;
	Context.Map.Particles.Color = Result41;
	Context.Map.Transient.ParticleColorScaleFactor = Result40;
}

void FloatFromCurve_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterValueScaleFactorFloatCurveOutput_Value;
	SampleCurve_EmitterValueScaleFactorFloatCurve(Context.Map.FloatFromCurve.CurveIndex, SampleCurve_EmitterValueScaleFactorFloatCurveOutput_Value);
	float Result42 = SampleCurve_EmitterValueScaleFactorFloatCurveOutput_Value * Context.Map.Constants.Emitter.FloatFromCurve.ScaleCurve;
	Out_Value = Result42;
}

void VectorFromFloat001_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context)
{
	float3 Output1;
	Output1.x = Context.Map.VectorFromFloat001.Value;
	Output1.y = Context.Map.VectorFromFloat001.Value;
	Output1.z = Context.Map.VectorFromFloat001.Value;
	Out_Vec3 = Output1;
}

void ScaleMeshSize_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Result43 = Context.Map.ScaleMeshSize.ScaleFactor * Context.Map.Transient.MeshScaleFactor;
	float3 Result44 = Context.Map.ScaleMeshSize.InitialMeshScale * Result43;
	Context.Map.Particles.Scale = Result44;
	Context.Map.Transient.MeshScaleFactor = Result43;
}

void FloatFromCurve002_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterValueVelocityScaleFloatCurveOutput_Value;
	SampleCurve_EmitterValueVelocityScaleFloatCurve(Context.Map.FloatFromCurve002.CurveIndex, SampleCurve_EmitterValueVelocityScaleFloatCurveOutput_Value);
	float Result45 = SampleCurve_EmitterValueVelocityScaleFloatCurveOutput_Value * Context.Map.Constants.Emitter.FloatFromCurve002.ScaleCurve;
	Out_Value = Result45;
}

void VectorFromFloat002_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context)
{
	float3 Output11;
	Output11.x = Context.Map.VectorFromFloat002.Value;
	Output11.y = Context.Map.VectorFromFloat002.Value;
	Output11.z = Context.Map.VectorFromFloat002.Value;
	Out_Vec3 = Output11;
}

void ScaleVelocity_NF_TransformOffset_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant27 = true;
	float4x4 Matrix_IfResult2;
	float4x4 Matrix001_IfResult1;
	if(In_ApplyScale)
	{
	Matrix_IfResult2 = Context.Map.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult1 = Context.Map.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult2 = Context.Map.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult1 = Context.Map.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal1;
	float4x4 TransformBase_Func_Output_OutTransform1;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult2, Matrix001_IfResult1, Constant27, TransformBase_Func_Output_bUseOriginal1, TransformBase_Func_Output_OutTransform1, Context);
	float3 Result46 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform1).xyz;
	float3 Vector_IfResult2;
	if(TransformBase_Func_Output_bUseOriginal1)
	{
	Vector_IfResult2 = In_InVector;
	}
	else
	{
	Vector_IfResult2 = Result46;
	}
	Out_OutVector = Vector_IfResult2;
}

void ScaleVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	int Constant25 = 0;
	bool Constant26 = false;
	float3 ScaleVelocity_NF_TransformOffset_Emitter_Func_Output_OutVector;
	ScaleVelocity_NF_TransformOffset_Emitter_Func_(Context.Map.ScaleVelocity.VelocityScale, Context.Map.ScaleVelocity.CoordinateSpace, Constant25, Constant26, ScaleVelocity_NF_TransformOffset_Emitter_Func_Output_OutVector, Context);
	float3 Result47 = ScaleVelocity_NF_TransformOffset_Emitter_Func_Output_OutVector * Context.Map.Particles.Initial.Velocity;
	Context.Map.Particles.Velocity = Result47;
}

void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	Context.Map.Local.SolveForcesAndVelocity.DeltaTime = Context.Map.SolveForcesAndVelocity.DeltaTime;
	Context.Map.Local.SolveForcesAndVelocity.PhysicsForce = Context.Map.SolveForcesAndVelocity.Force;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsForce = Context.Map.SolveForcesAndVelocity.Force;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.Map.SolveForcesAndVelocity.Velocity;
	Context.Map.Local.SolveForcesAndVelocity.Mass = Context.Map.SolveForcesAndVelocity.Mass;
	float Constant35 = 0.0001;
	float Result48 = max(Context.Map.Local.SolveForcesAndVelocity.Mass, Constant35);
	float Result49 = Reciprocal(Result48);
	float3 Result50 = Result49 * Context.Map.Local.SolveForcesAndVelocity.PhysicsForce;
	Context.Map.Local.SolveForcesAndVelocity.PhysicsForce = Result50;
	float3 Result51 = Context.Map.Local.SolveForcesAndVelocity.PhysicsForce * Context.Map.Local.SolveForcesAndVelocity.DeltaTime + Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float Constant36 = 0;
	float Result52 = max(Context.Map.Transient.PhysicsDrag, Constant36);
	float Result53 = Context.Map.Local.SolveForcesAndVelocity.DeltaTime * Result52;
	float Constant37 = 1;
	float Result54 = Result53 + Constant37;
	float3 Result55 = Result51 / Result54;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Result55;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsDrag = Context.Map.Transient.PhysicsDrag;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float3 Result56 = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity * Context.Map.Local.SolveForcesAndVelocity.DeltaTime + Context.Map.SolveForcesAndVelocity.Position;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Position = Result56;
	float3 Position_IfResult;
	float3 Velocity_IfResult;
	float3 PreviousVelocity_IfResult;
	if(Context.Map.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	Position_IfResult = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Velocity_IfResult = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	}
	else
	{
	Position_IfResult = Context.Map.SolveForcesAndVelocity.Position;
	Velocity_IfResult = Context.Map.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.Map.SolveForcesAndVelocity.PreviousVelocity;
	}
	Context.Map.Particles.Position = Position_IfResult;
	Context.Map.Particles.Velocity = Velocity_IfResult;
	Context.Map.Particles.PreviousVelocity = PreviousVelocity_IfResult;
	float3 Constant38 = float3(0,0,0);
	float Constant39 = 0;
	float3 ForceVector_IfResult;
	float Drag_IfResult;
	if(Context.Map.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	ForceVector_IfResult = Constant38;
	Drag_IfResult = Constant39;
	}
	else
	{
	ForceVector_IfResult = Context.Map.Transient.PhysicsForce;
	Drag_IfResult = Context.Map.Transient.PhysicsDrag;
	}
	Context.Map.Transient.PhysicsForce = ForceVector_IfResult;
	Context.Map.Transient.PhysicsDrag = Drag_IfResult;
}

void GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context)
{
	bool Constant50 = false;
	int Constant51 = 0;
	bool Result57 = NiagaraAll(In_RandomnessMode == Constant51);
	bool Result58 = Constant50 && Result57;
	int Constant52 = 1;
	bool Result59 = NiagaraAll(In_RandomnessMode == Constant52);
	bool Result60 = Result58 || Result59;
	int Seed_IfResult;
	if(In_OverrideSeed)
	{
	Seed_IfResult = In_Seed;
	}
	else
	{
	Seed_IfResult = Context.Map.Emitter.RandomSeed;
	}
	int Constant53 = 0;
	int Constant54 = 0;
	int Seed1_IfResult;
	int Seed2_IfResult;
	int Seed3_IfResult;
	if(In_FixedOverrideSeed)
	{
	Seed1_IfResult = Seed_IfResult;
	Seed2_IfResult = Constant53;
	Seed3_IfResult = Constant54;
	}
	else
	{
	Seed1_IfResult = Context.Map.Particles.UniqueID;
	Seed2_IfResult = Context.Map.Engine.System.TickCount;
	Seed3_IfResult = Seed_IfResult;
	}
	int Constant55 = -1;
	int Constant56 = -1;
	int Constant57 = -1;
	int Seed1_IfResult1;
	int Seed2_IfResult1;
	int Seed3_IfResult1;
	if(Result60)
	{
	Seed1_IfResult1 = Seed1_IfResult;
	Seed2_IfResult1 = Seed2_IfResult;
	Seed3_IfResult1 = Seed3_IfResult;
	}
	else
	{
	Seed1_IfResult1 = Constant55;
	Seed2_IfResult1 = Constant56;
	Seed3_IfResult1 = Constant57;
	}
	NiagaraRandInfo Output12;
	Output12.Seed1 = Seed1_IfResult1;
	Output12.Seed2 = Seed2_IfResult1;
	Output12.Seed3 = Seed3_IfResult1;
	Out_RandomInfo = Output12;
	Out_UseDeterministicRandoms = Result60;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant46 = (0);
	bool Constant47 = false;
	int Constant48 = 0;
	int Constant49 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo;
	bool GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms;
	GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(In_Seed, Constant46, In_OverrideSeed, Constant48, Constant49, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms, Context);
	float Result61 = In_Max - In_Min;
	int Seed1;
	int Seed2;
	int Seed3;
	Seed1 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo.Seed1;
	Seed2 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo.Seed2;
	Seed3 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo.Seed3;
	float Result62 = rand_float(Result61, Seed1, Seed2, Seed3);
	float Result63 = rand_float(Result61);
	float Random_IfResult;
	if(GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms)
	{
	Random_IfResult = Result62;
	}
	else
	{
	Random_IfResult = Result63;
	}
	float Result64 = In_Min + Random_IfResult;
	Out_Result = Result64;
}

void UniformRangedFloat006_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant44 = 0;
	bool Constant45 = false;
	int Mode_IfResult;
	bool Override_IfResult;
	if(Context.Map.UniformRangedFloat006.OverrideRandomness)
	{
	Mode_IfResult = Context.Map.UniformRangedFloat006.RandomnessMode;
	Override_IfResult = Context.Map.UniformRangedFloat006.OverrideSeed;
	}
	else
	{
	Mode_IfResult = Constant44;
	Override_IfResult = Constant45;
	}
	float RandomRangeFloat_Func_Output_Result;
	RandomRangeFloat_Func_(Context.Map.Constants.Emitter.UniformRangedFloat006.Minimum, Context.Map.Constants.Emitter.UniformRangedFloat006.Maximum, Context.Map.Constants.Emitter.UniformRangedFloat006.RandomSeed, Mode_IfResult, Override_IfResult, Context.Map.UniformRangedFloat006.FixedRandomSeed, RandomRangeFloat_Func_Output_Result, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result;
}

void UniformRangedFloat007_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant62 = 0;
	bool Constant63 = false;
	int Mode_IfResult1;
	bool Override_IfResult1;
	if(Context.Map.UniformRangedFloat007.OverrideRandomness)
	{
	Mode_IfResult1 = Context.Map.UniformRangedFloat007.RandomnessMode;
	Override_IfResult1 = Context.Map.UniformRangedFloat007.OverrideSeed;
	}
	else
	{
	Mode_IfResult1 = Constant62;
	Override_IfResult1 = Constant63;
	}
	float RandomRangeFloat_Func_Output_Result1;
	RandomRangeFloat_Func_(Context.Map.Constants.Emitter.UniformRangedFloat007.Minimum, Context.Map.Constants.Emitter.UniformRangedFloat007.Maximum, Context.Map.Constants.Emitter.UniformRangedFloat007.RandomSeed, Mode_IfResult1, Override_IfResult1, Context.Map.UniformRangedFloat007.FixedRandomSeed, RandomRangeFloat_Func_Output_Result1, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result1;
}

void UniformRangedFloat008_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant68 = 0;
	bool Constant69 = false;
	int Mode_IfResult2;
	bool Override_IfResult2;
	if(Context.Map.UniformRangedFloat008.OverrideRandomness)
	{
	Mode_IfResult2 = Context.Map.UniformRangedFloat008.RandomnessMode;
	Override_IfResult2 = Context.Map.UniformRangedFloat008.OverrideSeed;
	}
	else
	{
	Mode_IfResult2 = Constant68;
	Override_IfResult2 = Constant69;
	}
	float RandomRangeFloat_Func_Output_Result2;
	RandomRangeFloat_Func_(Context.Map.Constants.Emitter.UniformRangedFloat008.Minimum, Context.Map.Constants.Emitter.UniformRangedFloat008.Maximum, Context.Map.Constants.Emitter.UniformRangedFloat008.RandomSeed, Mode_IfResult2, Override_IfResult2, Context.Map.UniformRangedFloat008.FixedRandomSeed, RandomRangeFloat_Func_Output_Result2, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result2;
}

void BreakVector001_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context)
{
	float3 Output13;
	Output13.x = Context.Map.BreakVector001.X;
	Output13.y = Context.Map.BreakVector001.Y;
	Output13.z = Context.Map.BreakVector001.Z;
	Out_Vec3 = Output13;
}

void MeshRotationForce_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant75 = true;
	float4x4 Matrix_IfResult3;
	float4x4 Matrix001_IfResult2;
	if(In_ApplyScale)
	{
	Matrix_IfResult3 = Context.Map.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult2 = Context.Map.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult3 = Context.Map.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult2 = Context.Map.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal2;
	float4x4 TransformBase_Func_Output_OutTransform2;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult3, Matrix001_IfResult2, Constant75, TransformBase_Func_Output_bUseOriginal2, TransformBase_Func_Output_OutTransform2, Context);
	float3 Result68 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform2).xyz;
	float3 Vector_IfResult3;
	if(TransformBase_Func_Output_bUseOriginal2)
	{
	Vector_IfResult3 = In_InVector;
	}
	else
	{
	Vector_IfResult3 = Result68;
	}
	Out_OutVector = Vector_IfResult3;
}

void MeshRotationForce_Emitter_Func_(inout FSimulationContext Context)
{
	float Constant71 = 0.01;
	float Result65 = Context.Map.Constants.Emitter.MeshRotationForce.LeverRadiusASC40cmASC41 * Constant71;
	float Result66 = Result65 * Result65;
	float3 Result67 = Result66 * Context.Map.MeshRotationForce.Rotation;
	int Constant72 = 0;
	int Constant73 = 0;
	bool Constant74 = false;
	float3 MeshRotationForce_TransformVector_Emitter_Func_Output_OutVector;
	MeshRotationForce_TransformVector_Emitter_Func_(Result67, Constant72, Constant73, Constant74, MeshRotationForce_TransformVector_Emitter_Func_Output_OutVector, Context);
	float3 Result69 = Context.Map.Transient.PhysicsRotationalForce + MeshRotationForce_TransformVector_Emitter_Func_Output_OutVector;
	Context.Map.Transient.PhysicsRotationalForce = Result69;
}

void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context)
{
	float Result79 = length(In_V);
	bool Result80 = NiagaraAll(Result79 < In_Threshold);
	float Result81 = length(In_Fallback);
	float3 Vector_IfResult4;
	float float_IfResult;
	if(Result80)
	{
	Vector_IfResult4 = In_Fallback;
	float_IfResult = In_FallbackLength;
	}
	else
	{
	Vector_IfResult4 = In_V;
	float_IfResult = Result79;
	}
	float3 Result82 = Vector_IfResult4 / float_IfResult;
	float3 Vector_IfResult5;
	float float_IfResult1;
	if(Result80)
	{
	Vector_IfResult5 = In_Fallback;
	float_IfResult1 = Result81;
	}
	else
	{
	Vector_IfResult5 = Result82;
	float_IfResult1 = float_IfResult;
	}
	Out_Direction = Vector_IfResult5;
	Out_Length = float_IfResult1;
	Out_BelowThreshold = Result80;
}

void AxisAngleToQuaternion_Func_(float4 In_AxisAngle, bool In_NormalizeAxis, out float4 Out_Quaternion, inout FSimulationContext Context)
{
	float3 VECTOR_VAR;
	float NiagaraFloat;
	VECTOR_VAR.x = In_AxisAngle.x;
	VECTOR_VAR.y = In_AxisAngle.y;
	VECTOR_VAR.z = In_AxisAngle.z;
	NiagaraFloat = In_AxisAngle.w;
	float3 Result84 = normalize(VECTOR_VAR);
	float3 Vector_IfResult6;
	if(In_NormalizeAxis)
	{
	Vector_IfResult6 = Result84;
	}
	else
	{
	Vector_IfResult6 = VECTOR_VAR;
	}
	float Constant92 = 2;
	float Result85 = NiagaraFloat / Constant92;
	float Result86 = sin(Result85);
	float3 Result87 = Vector_IfResult6 * Result86;
	float Result88 = cos(Result85);
	float4 Output3;
	Output3.x = Result87.x;
	Output3.y = Result87.y;
	Output3.z = Result87.z;
	Output3.w = Result88;
	Out_Quaternion = Output3;
}

void CustomHlsl001624D816540ECD5F976902A85E139007C_Func_(float4 In_Quat1, float4 In_Quat2, out float4 Out_Result)
{

float4 SIGN_MASK0 = float4( 1.f, -1.f, 1.f, -1.f );
	float4 SIGN_MASK1 = float4( 1.f, 1.f, -1.f, -1.f );
	float4 SIGN_MASK2 = float4( -1.f, 1.f, 1.f, -1.f );
	Out_Result = (In_Quat1.wwww * In_Quat2);
	Out_Result = ((In_Quat1.xxxx * In_Quat2.wzyx) * SIGN_MASK0) + Out_Result;
	Out_Result = ((In_Quat1.yyyy * In_Quat2.zwxy)* SIGN_MASK1) + Out_Result;
	Out_Result = ((In_Quat1.zzzz * In_Quat2.yxwz)* SIGN_MASK2) + Out_Result;
}

void MultiplyQuaternion_Func_(float4 In_QuaternionA, float4 In_QuaternionB, out float4 Out_Quaternion, inout FSimulationContext Context)
{
	float4 CustomHlsl001624D816540ECD5F976902A85E139007C_Func_Output_Result;
	CustomHlsl001624D816540ECD5F976902A85E139007C_Func_(In_QuaternionA, In_QuaternionB, CustomHlsl001624D816540ECD5F976902A85E139007C_Func_Output_Result);
	Out_Quaternion = CustomHlsl001624D816540ECD5F976902A85E139007C_Func_Output_Result;
}

void ApplyRotationVector_Particle_NormalizeRotations_false_Func_(float3 In_RotationalVelocityVector, float In_DeltaTime, float4 In_ExistingOrientationQuat, out float4 Out_NewOrientationQuat, inout FSimulationContext Context)
{
	float3 Result78 = In_RotationalVelocityVector * In_DeltaTime;
	float3 Constant85 = float3(0,0,0);
	float Constant86 = 1e-05;
	float Constant87 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction;
	float DirectionAndLengthSafe_Func_Output_Length;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold;
	DirectionAndLengthSafe_Func_(Result78, Constant85, Constant86, Constant87, DirectionAndLengthSafe_Func_Output_Direction, DirectionAndLengthSafe_Func_Output_Length, DirectionAndLengthSafe_Func_Output_BelowThreshold, Context);
	float Constant88 = -1;
	float Constant89 = -1;
	float Constant90 = 1;
	float3 Output14;
	Output14.x = Constant88;
	Output14.y = Constant89;
	Output14.z = Constant90;
	float3 Result83 = DirectionAndLengthSafe_Func_Output_Direction * Output14;
	float4 Vector4;
	Vector4.x = Result83.x;
	Vector4.y = Result83.y;
	Vector4.z = Result83.z;
	Vector4.w = DirectionAndLengthSafe_Func_Output_Length;
	bool Constant91 = true;
	float4 AxisAngleToQuaternion_Func_Output_Quaternion;
	AxisAngleToQuaternion_Func_(Vector4, Constant91, AxisAngleToQuaternion_Func_Output_Quaternion, Context);
	float4 MultiplyQuaternion_Func_Output_Quaternion;
	MultiplyQuaternion_Func_(AxisAngleToQuaternion_Func_Output_Quaternion, In_ExistingOrientationQuat, MultiplyQuaternion_Func_Output_Quaternion, Context);
	float4 Quat_IfResult;
	if(DirectionAndLengthSafe_Func_Output_BelowThreshold)
	{
	Quat_IfResult = In_ExistingOrientationQuat;
	}
	else
	{
	Quat_IfResult = MultiplyQuaternion_Func_Output_Quaternion;
	}
	Out_NewOrientationQuat = Quat_IfResult;
}

void SolveRotationalForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	Context.Map.Local.SolveRotationalForcesAndVelocity.DeltaTime = Context.Map.SolveRotationalForcesAndVelocity.DeltaTime;
	float Constant82 = 1e-05;
	float Result70 = max(Context.Map.SolveRotationalForcesAndVelocity.RotationalInertia, Constant82);
	float3 Result71 = Context.Map.Transient.PhysicsRotationalForce / Result70;
	float3 Result72 = Result71 * Context.Map.Local.SolveRotationalForcesAndVelocity.DeltaTime;
	Context.Map.Local.SolveRotationalForcesAndVelocity.ForceRotationsInRadians = Result72;
	Context.Map.OUTPUT_VAR.SolveRotationalForcesAndVelocity.IncomingPhysicsRotationalForce = Context.Map.Transient.PhysicsRotationalForce;
	float3 Result73 = Context.Map.SolveRotationalForcesAndVelocity.RotationalVelocity + Context.Map.Local.SolveRotationalForcesAndVelocity.ForceRotationsInRadians;
	Context.Map.OUTPUT_VAR.SolveRotationalForcesAndVelocity.RotationalVelocity = Result73;
	float Constant83 = 0;
	float Result74 = max(Context.Map.Transient.PhysicsRotationalDrag, Constant83);
	float Result75 = Result74 * Context.Map.Local.SolveRotationalForcesAndVelocity.DeltaTime;
	float Constant84 = 1;
	float Result76 = Result75 + Constant84;
	float3 Result77 = Context.Map.OUTPUT_VAR.SolveRotationalForcesAndVelocity.RotationalVelocity / Result76;
	Context.Map.OUTPUT_VAR.SolveRotationalForcesAndVelocity.RotationalVelocity = Result77;
	Context.Map.OUTPUT_VAR.SolveRotationalForcesAndVelocity.IncomingPhysicsRotationalDrag = Context.Map.Transient.PhysicsRotationalDrag;
	float4 ApplyRotationVector_Particle_NormalizeRotations_false_Func_Output_NewOrientationQuat;
	ApplyRotationVector_Particle_NormalizeRotations_false_Func_(Context.Map.SolveRotationalForcesAndVelocity.RotationalVelocity, Context.Map.Local.SolveRotationalForcesAndVelocity.DeltaTime, Context.Map.SolveRotationalForcesAndVelocity.MeshOrientation, ApplyRotationVector_Particle_NormalizeRotations_false_Func_Output_NewOrientationQuat, Context);
	Context.Map.OUTPUT_VAR.SolveRotationalForcesAndVelocity.MeshOrientation = ApplyRotationVector_Particle_NormalizeRotations_false_Func_Output_NewOrientationQuat;
	float4 MeshOrientation_IfResult;
	float3 AngularVelocity_IfResult;
	if(Context.Map.SolveRotationalForcesAndVelocity.WritetoIntrinsicProperties)
	{
	MeshOrientation_IfResult = Context.Map.OUTPUT_VAR.SolveRotationalForcesAndVelocity.MeshOrientation;
	AngularVelocity_IfResult = Context.Map.OUTPUT_VAR.SolveRotationalForcesAndVelocity.RotationalVelocity;
	}
	else
	{
	MeshOrientation_IfResult = Context.Map.SolveRotationalForcesAndVelocity.MeshOrientation;
	AngularVelocity_IfResult = Context.Map.SolveRotationalForcesAndVelocity.RotationalVelocity;
	}
	Context.Map.Particles.MeshOrientation = MeshOrientation_IfResult;
	Context.Map.Particles.RotationalVelocity = AngularVelocity_IfResult;
	float3 Constant93 = float3(0,0,0);
	float Constant94 = 0;
	float3 ForceVector_IfResult1;
	float Drag_IfResult1;
	if(Context.Map.SolveRotationalForcesAndVelocity.WritetoIntrinsicProperties)
	{
	ForceVector_IfResult1 = Constant93;
	Drag_IfResult1 = Constant94;
	}
	else
	{
	ForceVector_IfResult1 = Context.Map.Transient.PhysicsRotationalForce;
	Drag_IfResult1 = Context.Map.Transient.PhysicsRotationalDrag;
	}
	Context.Map.Transient.PhysicsRotationalForce = ForceVector_IfResult1;
	Context.Map.Transient.PhysicsRotationalDrag = Drag_IfResult1;
}

float GetSpawnInterpolation()
{
	return 1.0f;}


void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void Simulate(inout FSimulationContext Context)
{
	EnterStatScope(0 );


	int Constant = 1;
	Context.Map.PendulumSetup.PendulumPivotOffsetCoordinateSpace = Constant;
	bool Constant1 = true;
	float3 PendulumSetup_NF_InitialParticlePosition_Emitter_Func_Output_OutPosition;
	PendulumSetup_NF_InitialParticlePosition_Emitter_Func_(PendulumSetup_NF_InitialParticlePosition_Emitter_Func_Output_OutPosition, Context);
	Context.Map.PendulumSetup.PendulumPivot = PendulumSetup_NF_InitialParticlePosition_Emitter_Func_Output_OutPosition;
	bool Constant4 = true;
	Context.Map.PendulumSetup.RigidPendulum = Constant4;
	float3 Constant5 = float3(0.0, 0.0, 0.0);
	Context.Map.Transient.PhysicsPendulumRestAxis = Constant5;
	bool Constant6 = false;
	Context.Map.PendulumSetup.EnableSpringDriver = Constant6;
	float3 Constant7 = float3(0,0,0);
	Context.Map.Transient.PhysicsForce = Constant7;
	EnterStatScope(1 );
	PendulumSetup_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant18 = true;
	Context.Map.DataInstance.Alive = Constant18;
	Context.Map.ParticleState.DeltaTime = Context.Map.Engine.DeltaTime;
	Context.Map.ParticleState.Lifetime = Context.Map.Particles.Lifetime;
	EnterStatScope(2 );
	ParticleState_Emitter_Func_(Context);
	ExitStatScope( );
	Context.Map.FloatFromCurve001.CurveIndex = Context.Map.Particles.NormalizedAge;
	float FloatFromCurve001_Emitter_Func_Output_Value;
	FloatFromCurve001_Emitter_Func_(FloatFromCurve001_Emitter_Func_Output_Value, Context);
	Context.Map.ScaleColor.ScaleAlpha = FloatFromCurve001_Emitter_Func_Output_Value;
	Context.Map.ScaleColor.ColorValueToScale = Context.Map.Particles.Initial.Color;
	float4 Constant22 = float4(1,1,1,1);
	Context.Map.Transient.ParticleColorScaleFactor = Constant22;
	EnterStatScope(3 );
	ScaleColor_Emitter_Func_(Context);
	ExitStatScope( );
	Context.Map.FloatFromCurve.CurveIndex = Context.Map.Particles.NormalizedAge;
	float FloatFromCurve_Emitter_Func_Output_Value;
	FloatFromCurve_Emitter_Func_(FloatFromCurve_Emitter_Func_Output_Value, Context);
	Context.Map.VectorFromFloat001.Value = FloatFromCurve_Emitter_Func_Output_Value;
	float3 VectorFromFloat001_Emitter_Func_Output_Vec3;
	VectorFromFloat001_Emitter_Func_(VectorFromFloat001_Emitter_Func_Output_Vec3, Context);
	Context.Map.ScaleMeshSize.ScaleFactor = VectorFromFloat001_Emitter_Func_Output_Vec3;
	Context.Map.ScaleMeshSize.InitialMeshScale = Context.Map.Particles.Initial.Scale;
	float3 Constant23 = float3(1,1,1);
	Context.Map.Transient.MeshScaleFactor = Constant23;
	EnterStatScope(4 );
	ScaleMeshSize_Emitter_Func_(Context);
	ExitStatScope( );
	Context.Map.FloatFromCurve002.CurveIndex = Context.Map.Particles.NormalizedAge;
	float FloatFromCurve002_Emitter_Func_Output_Value;
	FloatFromCurve002_Emitter_Func_(FloatFromCurve002_Emitter_Func_Output_Value, Context);
	Context.Map.VectorFromFloat002.Value = FloatFromCurve002_Emitter_Func_Output_Value;
	float3 VectorFromFloat002_Emitter_Func_Output_Vec3;
	VectorFromFloat002_Emitter_Func_(VectorFromFloat002_Emitter_Func_Output_Vec3, Context);
	Context.Map.ScaleVelocity.VelocityScale = VectorFromFloat002_Emitter_Func_Output_Vec3;
	int Constant24 = 2;
	Context.Map.ScaleVelocity.CoordinateSpace = Constant24;
	EnterStatScope(5 );
	ScaleVelocity_Emitter_Func_(Context);
	ExitStatScope( );
	Context.Map.Transient.PhysicsDeltaTime = Context.Map.Engine.DeltaTime;
	Context.Map.SolveForcesAndVelocity.DeltaTime = Context.Map.Transient.PhysicsDeltaTime;
	float Constant28 = (0.0);
	Context.Map.Local.SolveForcesAndVelocity.DeltaTime = Constant28;
	Context.Map.SolveForcesAndVelocity.Force = Context.Map.Transient.PhysicsForce;
	Context.Map.SolveForcesAndVelocity.Velocity = Context.Map.Particles.Velocity;
	Context.Map.SolveForcesAndVelocity.Mass = Context.Map.Particles.Mass;
	float3 Constant29 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.SolveForcesAndVelocity.PhysicsForce = Constant29;
	float3 Constant30 = float3(0.0, 0.0, 0.0);
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Constant30;
	float Constant31 = (0.0);
	Context.Map.Local.SolveForcesAndVelocity.Mass = Constant31;
	float Constant32 = 0;
	Context.Map.Transient.PhysicsDrag = Constant32;
	Context.Map.SolveForcesAndVelocity.PreviousVelocity = Context.Map.Particles.PreviousVelocity;
	Context.Map.SolveForcesAndVelocity.Position = Context.Map.Particles.Position;
	float3 Constant33 = float3(0.0, 0.0, 0.0);
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Position = Constant33;
	bool Constant34 = true;
	Context.Map.SolveForcesAndVelocity.WritetoIntrinsicProperties = Constant34;
	EnterStatScope(6 );
	SolveForcesAndVelocity_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant40 = false;
	Context.Map.UniformRangedFloat006.OverrideRandomness = Constant40;
	int Constant41 = 0;
	Context.Map.UniformRangedFloat006.RandomnessMode = Constant41;
	bool Constant42 = false;
	Context.Map.UniformRangedFloat006.OverrideSeed = Constant42;
	bool Constant43 = false;
	Context.Map.UniformRangedFloat006.FixedRandomSeed = Constant43;
	float UniformRangedFloat006_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat006_Emitter_Func_(UniformRangedFloat006_Emitter_Func_Output_UniformRangedFloat, Context);
	bool Constant58 = false;
	Context.Map.UniformRangedFloat007.OverrideRandomness = Constant58;
	int Constant59 = 0;
	Context.Map.UniformRangedFloat007.RandomnessMode = Constant59;
	bool Constant60 = false;
	Context.Map.UniformRangedFloat007.OverrideSeed = Constant60;
	bool Constant61 = false;
	Context.Map.UniformRangedFloat007.FixedRandomSeed = Constant61;
	float UniformRangedFloat007_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat007_Emitter_Func_(UniformRangedFloat007_Emitter_Func_Output_UniformRangedFloat, Context);
	bool Constant64 = false;
	Context.Map.UniformRangedFloat008.OverrideRandomness = Constant64;
	int Constant65 = 0;
	Context.Map.UniformRangedFloat008.RandomnessMode = Constant65;
	bool Constant66 = false;
	Context.Map.UniformRangedFloat008.OverrideSeed = Constant66;
	bool Constant67 = false;
	Context.Map.UniformRangedFloat008.FixedRandomSeed = Constant67;
	float UniformRangedFloat008_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat008_Emitter_Func_(UniformRangedFloat008_Emitter_Func_Output_UniformRangedFloat, Context);
	Context.Map.BreakVector001.X = UniformRangedFloat006_Emitter_Func_Output_UniformRangedFloat;
	Context.Map.BreakVector001.Y = UniformRangedFloat007_Emitter_Func_Output_UniformRangedFloat;
	Context.Map.BreakVector001.Z = UniformRangedFloat008_Emitter_Func_Output_UniformRangedFloat;
	float3 BreakVector001_Emitter_Func_Output_Vec3;
	BreakVector001_Emitter_Func_(BreakVector001_Emitter_Func_Output_Vec3, Context);
	Context.Map.MeshRotationForce.Rotation = BreakVector001_Emitter_Func_Output_Vec3;
	float3 Constant70 = float3(0,0,0);
	Context.Map.Transient.PhysicsRotationalForce = Constant70;
	EnterStatScope(7 );
	MeshRotationForce_Emitter_Func_(Context);
	ExitStatScope( );
	Context.Map.SolveRotationalForcesAndVelocity.DeltaTime = Context.Map.Transient.PhysicsDeltaTime;
	float Constant76 = (0.0);
	Context.Map.Local.SolveRotationalForcesAndVelocity.DeltaTime = Constant76;
	Context.Map.SolveRotationalForcesAndVelocity.RotationalInertia = Context.Map.Particles.RotationalInertia;
	float3 Constant77 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.SolveRotationalForcesAndVelocity.ForceRotationsInRadians = Constant77;
	Context.Map.SolveRotationalForcesAndVelocity.RotationalVelocity = Context.Map.Particles.RotationalVelocity;
	float3 Constant78 = float3(0.0, 0.0, 0.0);
	Context.Map.OUTPUT_VAR.SolveRotationalForcesAndVelocity.RotationalVelocity = Constant78;
	float Constant79 = 0;
	Context.Map.Transient.PhysicsRotationalDrag = Constant79;
	Context.Map.SolveRotationalForcesAndVelocity.MeshOrientation = Context.Map.Particles.MeshOrientation;
	float4 Constant80 = float4(0.0, 0.0, 0.0, 1.0);
	Context.Map.OUTPUT_VAR.SolveRotationalForcesAndVelocity.MeshOrientation = Constant80;
	bool Constant81 = true;
	Context.Map.SolveRotationalForcesAndVelocity.WritetoIntrinsicProperties = Constant81;
	EnterStatScope(8 );
	SolveRotationalForcesAndVelocity_Emitter_Func_(Context);
	ExitStatScope( );
	ExitStatScope( );
}
void SimulateMain()
{
EnterStatScope(9 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.Map.Particles.Age = InputDataFloat(0, 0);
	Context.Map.Particles.Color.r = InputDataFloat(0, 1);
	Context.Map.Particles.Color.g = InputDataFloat(0, 2);
	Context.Map.Particles.Color.b = InputDataFloat(0, 3);
	Context.Map.Particles.Color.a = InputDataFloat(0, 4);
	Context.Map.Particles.Initial.Color.r = InputDataFloat(0, 5);
	Context.Map.Particles.Initial.Color.g = InputDataFloat(0, 6);
	Context.Map.Particles.Initial.Color.b = InputDataFloat(0, 7);
	Context.Map.Particles.Initial.Color.a = InputDataFloat(0, 8);
	Context.Map.Particles.Initial.Scale.x = InputDataFloat(0, 9);
	Context.Map.Particles.Initial.Scale.y = InputDataFloat(0, 10);
	Context.Map.Particles.Initial.Scale.z = InputDataFloat(0, 11);
	Context.Map.Particles.Initial.Velocity.x = InputDataFloat(0, 12);
	Context.Map.Particles.Initial.Velocity.y = InputDataFloat(0, 13);
	Context.Map.Particles.Initial.Velocity.z = InputDataFloat(0, 14);
	Context.Map.Particles.InitialRotation.x = InputDataFloat(0, 15);
	Context.Map.Particles.InitialRotation.y = InputDataFloat(0, 16);
	Context.Map.Particles.InitialRotation.z = InputDataFloat(0, 17);
	Context.Map.Particles.InitialRotation.w = InputDataFloat(0, 18);
	Context.Map.Particles.Lifetime = InputDataFloat(0, 19);
	Context.Map.Particles.Mass = InputDataFloat(0, 20);
	Context.Map.Particles.MaterialRandom = InputDataFloat(0, 21);
	Context.Map.Particles.MeshOrientation.x = InputDataFloat(0, 22);
	Context.Map.Particles.MeshOrientation.y = InputDataFloat(0, 23);
	Context.Map.Particles.MeshOrientation.z = InputDataFloat(0, 24);
	Context.Map.Particles.MeshOrientation.w = InputDataFloat(0, 25);
	Context.Map.Particles.NormalizedAge = InputDataFloat(0, 26);
	Context.Map.Particles.Position.x = InputDataFloat(0, 27);
	Context.Map.Particles.Position.y = InputDataFloat(0, 28);
	Context.Map.Particles.Position.z = InputDataFloat(0, 29);
	Context.Map.Particles.PreviousVelocity.x = InputDataFloat(0, 30);
	Context.Map.Particles.PreviousVelocity.y = InputDataFloat(0, 31);
	Context.Map.Particles.PreviousVelocity.z = InputDataFloat(0, 32);
	Context.Map.Particles.RotationalInertia = InputDataFloat(0, 33);
	Context.Map.Particles.RotationalVelocity.x = InputDataFloat(0, 34);
	Context.Map.Particles.RotationalVelocity.y = InputDataFloat(0, 35);
	Context.Map.Particles.RotationalVelocity.z = InputDataFloat(0, 36);
	Context.Map.Particles.Scale.x = InputDataFloat(0, 37);
	Context.Map.Particles.Scale.y = InputDataFloat(0, 38);
	Context.Map.Particles.Scale.z = InputDataFloat(0, 39);
	Context.Map.Particles.SpriteRotation = InputDataFloat(0, 40);
	Context.Map.Particles.SpriteSize.x = InputDataFloat(0, 41);
	Context.Map.Particles.SpriteSize.y = InputDataFloat(0, 42);
	Context.Map.Particles.UniqueID = InputDataInt(0, 43);
	Context.Map.Particles.Velocity.x = InputDataFloat(0, 44);
	Context.Map.Particles.Velocity.y = InputDataFloat(0, 45);
	Context.Map.Particles.Velocity.z = InputDataFloat(0, 46);
	Context.Map.Constants.Emitter.PendulumSetup.PendulumPivotOffset = Constants_Emitter_PendulumSetup_PendulumPivotOffset;
	Context.Map.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.Map.Constants.Emitter.PendulumSetup.PendulumRestAxis = Constants_Emitter_PendulumSetup_PendulumRestAxis;
	Context.Map.Constants.Emitter.PendulumSetup.PendulumLength = Constants_Emitter_PendulumSetup_PendulumLength;
	Context.Map.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.Map.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.Map.Constants.Emitter.PendulumSetup.SpringDrivenConstraintASC40TightnessASC41 = Constants_Emitter_PendulumSetup_SpringDrivenConstraintASC40TightnessASC41;
	Context.Map.Engine.DeltaTime = Engine_DeltaTime;
	Context.Map.Constants.Emitter.FloatFromCurve001.ScaleCurve = Constants_Emitter_FloatFromCurve001_ScaleCurve;
	Context.Map.Constants.Emitter.ScaleColor.ScaleRGB = Constants_Emitter_ScaleColor_ScaleRGB;
	Context.Map.Constants.Emitter.FloatFromCurve.ScaleCurve = Constants_Emitter_FloatFromCurve_ScaleCurve;
	Context.Map.Constants.Emitter.FloatFromCurve002.ScaleCurve = Constants_Emitter_FloatFromCurve002_ScaleCurve;
	Context.Map.Constants.Emitter.SolveForcesAndVelocity.SpeedLimit = Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	Context.Map.Constants.Emitter.SolveForcesAndVelocity.AccelerationLimit = Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	Context.Map.Constants.Emitter.UniformRangedFloat006.Minimum = Constants_Emitter_UniformRangedFloat006_Minimum;
	Context.Map.Constants.Emitter.UniformRangedFloat006.Maximum = Constants_Emitter_UniformRangedFloat006_Maximum;
	Context.Map.Constants.Emitter.UniformRangedFloat006.RandomSeed = Constants_Emitter_UniformRangedFloat006_RandomSeed;
	Context.Map.Emitter.RandomSeed = Emitter_RandomSeed;
	Context.Map.Engine.System.TickCount = Engine_System_TickCount;
	Context.Map.Constants.Emitter.UniformRangedFloat007.Minimum = Constants_Emitter_UniformRangedFloat007_Minimum;
	Context.Map.Constants.Emitter.UniformRangedFloat007.Maximum = Constants_Emitter_UniformRangedFloat007_Maximum;
	Context.Map.Constants.Emitter.UniformRangedFloat007.RandomSeed = Constants_Emitter_UniformRangedFloat007_RandomSeed;
	Context.Map.Constants.Emitter.UniformRangedFloat008.Minimum = Constants_Emitter_UniformRangedFloat008_Minimum;
	Context.Map.Constants.Emitter.UniformRangedFloat008.Maximum = Constants_Emitter_UniformRangedFloat008_Maximum;
	Context.Map.Constants.Emitter.UniformRangedFloat008.RandomSeed = Constants_Emitter_UniformRangedFloat008_RandomSeed;
	Context.Map.Constants.Emitter.MeshRotationForce.LeverRadiusASC40cmASC41 = Constants_Emitter_MeshRotationForce_LeverRadiusASC40cmASC41;
	Context.Map.Engine.Emitter.TotalSpawnedParticles = Engine_Emitter_TotalSpawnedParticles;
	ReadDataSets(Context);
	Simulate(Context);
	WriteDataSets(Context);
	{
	bool bValid = Context.Map.DataInstance.Alive;
	int TmpWriteIndex = OutputIndex(0, true, bValid);
	OutputDataFloat(0, 0, TmpWriteIndex, Context.Map.Particles.Age);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.Map.Particles.Color.r);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.Map.Particles.Color.g);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.Map.Particles.Color.b);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.Map.Particles.Color.a);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.Map.Particles.Initial.Color.r);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.Map.Particles.Initial.Color.g);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.Map.Particles.Initial.Color.b);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.Map.Particles.Initial.Color.a);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.Map.Particles.Initial.Scale.x);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.Map.Particles.Initial.Scale.y);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.Map.Particles.Initial.Scale.z);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.Map.Particles.Initial.Velocity.x);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.Map.Particles.Initial.Velocity.y);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.Map.Particles.Initial.Velocity.z);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.Map.Particles.InitialRotation.x);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.Map.Particles.InitialRotation.y);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.Map.Particles.InitialRotation.z);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.Map.Particles.InitialRotation.w);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.Map.Particles.Lifetime);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.Map.Particles.Mass);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.Map.Particles.MaterialRandom);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.Map.Particles.MeshOrientation.x);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.Map.Particles.MeshOrientation.y);
	OutputDataFloat(0, 24, TmpWriteIndex, Context.Map.Particles.MeshOrientation.z);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.Map.Particles.MeshOrientation.w);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.Map.Particles.NormalizedAge);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.Map.Particles.Position.x);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.Map.Particles.Position.y);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.Map.Particles.Position.z);
	OutputDataFloat(0, 30, TmpWriteIndex, Context.Map.Particles.PreviousVelocity.x);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.Map.Particles.PreviousVelocity.y);
	OutputDataFloat(0, 32, TmpWriteIndex, Context.Map.Particles.PreviousVelocity.z);
	OutputDataFloat(0, 33, TmpWriteIndex, Context.Map.Particles.RotationalInertia);
	OutputDataFloat(0, 34, TmpWriteIndex, Context.Map.Particles.RotationalVelocity.x);
	OutputDataFloat(0, 35, TmpWriteIndex, Context.Map.Particles.RotationalVelocity.y);
	OutputDataFloat(0, 36, TmpWriteIndex, Context.Map.Particles.RotationalVelocity.z);
	OutputDataFloat(0, 37, TmpWriteIndex, Context.Map.Particles.Scale.x);
	OutputDataFloat(0, 38, TmpWriteIndex, Context.Map.Particles.Scale.y);
	OutputDataFloat(0, 39, TmpWriteIndex, Context.Map.Particles.Scale.z);
	OutputDataFloat(0, 40, TmpWriteIndex, Context.Map.Particles.SpriteRotation);
	OutputDataFloat(0, 41, TmpWriteIndex, Context.Map.Particles.SpriteSize.x);
	OutputDataFloat(0, 42, TmpWriteIndex, Context.Map.Particles.SpriteSize.y);
	OutputDataInt(0, 43, TmpWriteIndex, Context.Map.Particles.UniqueID);
	OutputDataFloat(0, 44, TmpWriteIndex, Context.Map.Particles.Velocity.x);
	OutputDataFloat(0, 45, TmpWriteIndex, Context.Map.Particles.Velocity.y);
	OutputDataFloat(0, 46, TmpWriteIndex, Context.Map.Particles.Velocity.z);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
